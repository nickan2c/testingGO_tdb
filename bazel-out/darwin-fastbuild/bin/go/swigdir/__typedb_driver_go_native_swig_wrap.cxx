/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

// source: c/typedb_driver.i



#define SWIG_VERSION 0x040101
#define SWIGGO
#define SWIGMODULE typedb_driver
#define SWIG_DIRECTORS
/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef ptrdiff_t intgo;
typedef size_t uintgo;


# if !defined(__clang__) && (defined(__i386__) || defined(__x86_64__))
#   define SWIGSTRUCTPACKED __attribute__((__packed__, __gcc_struct__))
# else
#   define SWIGSTRUCTPACKED __attribute__((__packed__))
# endif



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;



static _gostring_ Swig_AllocateString(const char *p, size_t l) {
  _gostring_ ret;
  ret.p = (char*)malloc(l);
  memcpy(ret.p, p, l);
  ret.n = l;
  return ret;
}

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Go proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#include <exception>
#include <map>

namespace Swig {

  class DirectorException : public std::exception {
  };
}

/* Handle memory management for directors.  */

namespace {
  struct GCItem {
    virtual ~GCItem() {}
  };

  struct GCItem_var {
    GCItem_var(GCItem *item = 0) : _item(item) {
    }

    GCItem_var& operator=(GCItem *item) {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }

    ~GCItem_var() {
      delete _item;
    }

    GCItem* operator->() {
      return _item;
    }

    private:
      GCItem *_item;
  };

  template <typename Type>
  struct GCItem_T : GCItem {
    GCItem_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCItem_T() {
      delete _ptr;
    }

  private:
    Type *_ptr;
  };
}

class Swig_memory {
public:
  template <typename Type>
  void swig_acquire_pointer(Type* vptr) {
    if (vptr) {
      swig_owner[vptr] = new GCItem_T<Type>(vptr);
    }
  }
private:
  typedef std::map<void *, GCItem_var> swig_ownership_map;
  swig_ownership_map swig_owner;
};

template <typename Type>
static void swig_acquire_pointer(Swig_memory** pmem, Type* ptr) {
  if (!pmem) {
    *pmem = new Swig_memory;
  }
  (*pmem)->swig_acquire_pointer(ptr);
}

#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


static void Swig_free(void* p) {
  free(p);
}

static void* Swig_malloc(int c) {
  return malloc(c);
}


extern "C" {
#include "typedb_driver.h"
}


#include <stdint.h>		// Use the C99 official header

SWIGINTERN void delete_Error(Error *self){ error_drop(self); }
SWIGINTERN void delete_SchemaException(SchemaException *self){ schema_exception_drop(self); }
SWIGINTERN void delete_SchemaExceptionIterator(SchemaExceptionIterator *self){ schema_exception_iterator_drop(self); }
SWIGINTERN void delete_Credential(Credential *self){ credential_drop(self); }
SWIGINTERN void delete_Options(Options *self){ options_drop(self); }
SWIGINTERN void delete_Connection(Connection *self){ connection_close(self); }
SWIGINTERN void delete_Session(Session *self){ session_close(self); }
SWIGINTERN void delete_Transaction(Transaction *self){ transaction_close(self); }
SWIGINTERN void delete_DatabaseManager(DatabaseManager *self){ database_manager_drop(self); }
SWIGINTERN void delete_Database(Database *self){ database_close(self); }
SWIGINTERN void delete_DatabaseIterator(DatabaseIterator *self){ database_iterator_drop(self); }
SWIGINTERN void delete_ReplicaInfo(ReplicaInfo *self){ replica_info_drop(self); }
SWIGINTERN void delete_ReplicaInfoIterator(ReplicaInfoIterator *self){ replica_info_iterator_drop(self); }
SWIGINTERN void delete_UserManager(UserManager *self){ user_manager_drop(self); }
SWIGINTERN void delete_User(User *self){ user_drop(self); }
SWIGINTERN void delete_UserIterator(UserIterator *self){ user_iterator_drop(self); }
SWIGINTERN void delete_Concept(Concept *self){ concept_drop(self); }
SWIGINTERN void delete_ConceptIterator(ConceptIterator *self){ concept_iterator_drop(self); }
SWIGINTERN void delete_Annotation(Annotation *self){ annotation_drop(self); }
SWIGINTERN void delete_RolePlayer(RolePlayer *self){ role_player_drop(self); }
SWIGINTERN void delete_RolePlayerIterator(RolePlayerIterator *self){ role_player_iterator_drop(self); }
SWIGINTERN void delete_ConceptMap(ConceptMap *self){ concept_map_drop(self); }
SWIGINTERN void delete_ConceptMapIterator(ConceptMapIterator *self){ concept_map_iterator_drop(self); }
SWIGINTERN void delete_Explainables(Explainables *self){ explainables_drop(self); }
SWIGINTERN void delete_Explainable(Explainable *self){ explainable_drop(self); }
SWIGINTERN void delete_ConceptMapGroup(ConceptMapGroup *self){ concept_map_group_drop(self); }
SWIGINTERN void delete_ConceptMapGroupIterator(ConceptMapGroupIterator *self){ concept_map_group_iterator_drop(self); }
SWIGINTERN void delete_StringIterator(StringIterator *self){ string_iterator_drop(self); }
SWIGINTERN void delete_StringPairIterator(StringPairIterator *self){ string_pair_iterator_drop(self); }
SWIGINTERN void delete_ValueGroup(ValueGroup *self){ value_group_drop(self); }
SWIGINTERN void delete_ValueGroupIterator(ValueGroupIterator *self){ value_group_iterator_drop(self); }
SWIGINTERN void delete_Explanation(Explanation *self){ explanation_drop(self); }
SWIGINTERN void delete_ExplanationIterator(ExplanationIterator *self){ explanation_iterator_drop(self); }
SWIGINTERN void delete_Rule(Rule *self){ rule_drop(self); }
SWIGINTERN void delete_RuleIterator(RuleIterator *self){ rule_iterator_drop(self); }
SWIGINTERN void delete_BoolPromise(BoolPromise *self){ bool_promise_resolve(self); }
SWIGINTERN void delete_ConceptPromise(ConceptPromise *self){ concept_promise_resolve(self); }
SWIGINTERN void delete_RulePromise(RulePromise *self){ rule_promise_resolve(self); }
SWIGINTERN void delete_StringPromise(StringPromise *self){ string_promise_resolve(self); }
SWIGINTERN void delete_VoidPromise(VoidPromise *self){ void_promise_resolve(self); }

struct SessionCallbackDirector {
    SessionCallbackDirector() {}
    virtual ~SessionCallbackDirector() {}
    virtual void callback() = 0;
};


#include <atomic>
#include <memory>
#include <iostream>
#include <unordered_map>

static std::unordered_map<std::uintptr_t, SessionCallbackDirector*> sessionCallbacks {};

std::uintptr_t session_callback_register(SessionCallbackDirector* handler) {
    static std::atomic_uintptr_t nextID;
    std::uintptr_t ID = nextID.fetch_add(1);
    sessionCallbacks.insert({ID, handler});
    return ID;
}

static void session_callback_execute(void* ID) {
    try {
        sessionCallbacks.at(reinterpret_cast<std::uintptr_t>(ID))->callback();
    } catch (std::exception const& e) {
        std::cerr << "[ERROR] " << e.what() << std::endl;
    }
}

static void session_callback_erase(void* ID) {
    try {
        sessionCallbacks.erase(reinterpret_cast<std::uintptr_t>(ID));
    } catch (std::exception const& e) {
        std::cerr << "[ERROR] " << e.what() << std::endl;
    }
}


void session_on_close_register(const Session* session, SessionCallbackDirector* handler) {
    std::uintptr_t ID = session_callback_register(handler);
    session_on_close(session, reinterpret_cast<void*>(ID), &session_callback_execute, &session_callback_erase);
}

void session_on_reopen_register(const Session* session, SessionCallbackDirector* handler) {
    std::uintptr_t ID = session_callback_register(handler);
    session_on_reopen(session, reinterpret_cast<void*>(ID), &session_callback_execute, &session_callback_erase);
}


struct TransactionCallbackDirector {
    TransactionCallbackDirector() {}
    virtual ~TransactionCallbackDirector() {}
    virtual void callback(Error*) = 0;
};


#include <memory>
#include <iostream>
#include <unordered_map>
static std::unordered_map<size_t, TransactionCallbackDirector*> transactionOnCloseCallbacks {};
static void transaction_callback_execute(size_t ID, Error* error) {
    try {
        transactionOnCloseCallbacks.at(ID)->callback(error);
        transactionOnCloseCallbacks.erase(ID);
    } catch (std::exception const& e) {
        std::cerr << "[ERROR] " << e.what() << std::endl;
    }
}


#include <atomic>
void transaction_on_close_register(const Transaction* transaction, TransactionCallbackDirector* handler) {
    static std::atomic_size_t nextID;
    std::size_t ID = nextID.fetch_add(1);
    transactionOnCloseCallbacks.insert({ID, handler});
    transaction_on_close(transaction, ID, &transaction_callback_execute);
}


#include <string.h>


// C++ director class methods.
#include "__typedb_driver_go_native_swig_wrap.h"

SwigDirector_SessionCallbackDirector::SwigDirector_SessionCallbackDirector(int swig_p)
    : SessionCallbackDirector(),
      go_val(swig_p), swig_mem(0)
{ }

extern "C" void Swiggo_DeleteDirector_SessionCallbackDirector_typedb_driver_bb72060ecdcaae0b(intgo);
SwigDirector_SessionCallbackDirector::~SwigDirector_SessionCallbackDirector()
{
  Swiggo_DeleteDirector_SessionCallbackDirector_typedb_driver_bb72060ecdcaae0b(go_val);
  delete swig_mem;
}

extern "C" void Swig_DirectorSessionCallbackDirector_callback_callback_typedb_driver_bb72060ecdcaae0b(int);
void SwigDirector_SessionCallbackDirector::callback() {
  Swig_DirectorSessionCallbackDirector_callback_callback_typedb_driver_bb72060ecdcaae0b(go_val);
}

SwigDirector_TransactionCallbackDirector::SwigDirector_TransactionCallbackDirector(int swig_p)
    : TransactionCallbackDirector(),
      go_val(swig_p), swig_mem(0)
{ }

extern "C" void Swiggo_DeleteDirector_TransactionCallbackDirector_typedb_driver_bb72060ecdcaae0b(intgo);
SwigDirector_TransactionCallbackDirector::~SwigDirector_TransactionCallbackDirector()
{
  Swiggo_DeleteDirector_TransactionCallbackDirector_typedb_driver_bb72060ecdcaae0b(go_val);
  delete swig_mem;
}

extern "C" void Swig_DirectorTransactionCallbackDirector_callback_callback_typedb_driver_bb72060ecdcaae0b(int, Error *arg0);
void SwigDirector_TransactionCallbackDirector::callback(Error *arg0) {
  Error *swig_arg0;
  
  *(Error **)&swig_arg0 = (Error *)arg0; 
  Swig_DirectorTransactionCallbackDirector_callback_callback_typedb_driver_bb72060ecdcaae0b(go_val, swig_arg0);
}

#ifdef __cplusplus
extern "C" {
#endif

void _wrap_Swig_free_typedb_driver_bb72060ecdcaae0b(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  
  arg1 = *(void **)&_swig_go_0; 
  
  Swig_free(arg1);
  
}


void *_wrap_Swig_malloc_typedb_driver_bb72060ecdcaae0b(intgo _swig_go_0) {
  int arg1 ;
  void *result = 0 ;
  void *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (void *)Swig_malloc(arg1);
  *(void **)&_swig_go_result = (void *)result; 
  return _swig_go_result;
}


void _wrap_delete_Error_typedb_driver_bb72060ecdcaae0b(Error *_swig_go_0) {
  Error *arg1 = (Error *) 0 ;
  
  arg1 = *(Error **)&_swig_go_0; 
  
  delete_Error(arg1);
  
}


void _wrap_delete_SchemaException_typedb_driver_bb72060ecdcaae0b(SchemaException *_swig_go_0) {
  SchemaException *arg1 = (SchemaException *) 0 ;
  
  arg1 = *(SchemaException **)&_swig_go_0; 
  
  delete_SchemaException(arg1);
  
}


void _wrap_delete_SchemaExceptionIterator_typedb_driver_bb72060ecdcaae0b(SchemaExceptionIterator *_swig_go_0) {
  SchemaExceptionIterator *arg1 = (SchemaExceptionIterator *) 0 ;
  
  arg1 = *(SchemaExceptionIterator **)&_swig_go_0; 
  
  delete_SchemaExceptionIterator(arg1);
  
}


void _wrap_delete_Credential_typedb_driver_bb72060ecdcaae0b(Credential *_swig_go_0) {
  Credential *arg1 = (Credential *) 0 ;
  
  arg1 = *(Credential **)&_swig_go_0; 
  
  delete_Credential(arg1);
  
}


void _wrap_delete_Options_typedb_driver_bb72060ecdcaae0b(Options *_swig_go_0) {
  Options *arg1 = (Options *) 0 ;
  
  arg1 = *(Options **)&_swig_go_0; 
  
  delete_Options(arg1);
  
}


void _wrap_delete_Connection_typedb_driver_bb72060ecdcaae0b(Connection *_swig_go_0) {
  Connection *arg1 = (Connection *) 0 ;
  
  arg1 = *(Connection **)&_swig_go_0; 
  
  delete_Connection(arg1);
  
}


void _wrap_delete_Session_typedb_driver_bb72060ecdcaae0b(Session *_swig_go_0) {
  Session *arg1 = (Session *) 0 ;
  
  arg1 = *(Session **)&_swig_go_0; 
  
  delete_Session(arg1);
  
}


void _wrap_delete_Transaction_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0) {
  Transaction *arg1 = (Transaction *) 0 ;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  
  delete_Transaction(arg1);
  
}


void _wrap_delete_DatabaseManager_typedb_driver_bb72060ecdcaae0b(DatabaseManager *_swig_go_0) {
  DatabaseManager *arg1 = (DatabaseManager *) 0 ;
  
  arg1 = *(DatabaseManager **)&_swig_go_0; 
  
  delete_DatabaseManager(arg1);
  
}


void _wrap_delete_Database_typedb_driver_bb72060ecdcaae0b(Database *_swig_go_0) {
  Database *arg1 = (Database *) 0 ;
  
  arg1 = *(Database **)&_swig_go_0; 
  
  delete_Database(arg1);
  
}


void _wrap_delete_DatabaseIterator_typedb_driver_bb72060ecdcaae0b(DatabaseIterator *_swig_go_0) {
  DatabaseIterator *arg1 = (DatabaseIterator *) 0 ;
  
  arg1 = *(DatabaseIterator **)&_swig_go_0; 
  
  delete_DatabaseIterator(arg1);
  
}


void _wrap_delete_ReplicaInfo_typedb_driver_bb72060ecdcaae0b(ReplicaInfo *_swig_go_0) {
  ReplicaInfo *arg1 = (ReplicaInfo *) 0 ;
  
  arg1 = *(ReplicaInfo **)&_swig_go_0; 
  
  delete_ReplicaInfo(arg1);
  
}


void _wrap_delete_ReplicaInfoIterator_typedb_driver_bb72060ecdcaae0b(ReplicaInfoIterator *_swig_go_0) {
  ReplicaInfoIterator *arg1 = (ReplicaInfoIterator *) 0 ;
  
  arg1 = *(ReplicaInfoIterator **)&_swig_go_0; 
  
  delete_ReplicaInfoIterator(arg1);
  
}


void _wrap_delete_UserManager_typedb_driver_bb72060ecdcaae0b(UserManager *_swig_go_0) {
  UserManager *arg1 = (UserManager *) 0 ;
  
  arg1 = *(UserManager **)&_swig_go_0; 
  
  delete_UserManager(arg1);
  
}


void _wrap_delete_User_typedb_driver_bb72060ecdcaae0b(User *_swig_go_0) {
  User *arg1 = (User *) 0 ;
  
  arg1 = *(User **)&_swig_go_0; 
  
  delete_User(arg1);
  
}


void _wrap_delete_UserIterator_typedb_driver_bb72060ecdcaae0b(UserIterator *_swig_go_0) {
  UserIterator *arg1 = (UserIterator *) 0 ;
  
  arg1 = *(UserIterator **)&_swig_go_0; 
  
  delete_UserIterator(arg1);
  
}


void _wrap_delete_Concept_typedb_driver_bb72060ecdcaae0b(Concept *_swig_go_0) {
  Concept *arg1 = (Concept *) 0 ;
  
  arg1 = *(Concept **)&_swig_go_0; 
  
  delete_Concept(arg1);
  
}


void _wrap_delete_ConceptIterator_typedb_driver_bb72060ecdcaae0b(ConceptIterator *_swig_go_0) {
  ConceptIterator *arg1 = (ConceptIterator *) 0 ;
  
  arg1 = *(ConceptIterator **)&_swig_go_0; 
  
  delete_ConceptIterator(arg1);
  
}


void _wrap_delete_Annotation_typedb_driver_bb72060ecdcaae0b(Annotation *_swig_go_0) {
  Annotation *arg1 = (Annotation *) 0 ;
  
  arg1 = *(Annotation **)&_swig_go_0; 
  
  delete_Annotation(arg1);
  
}


void _wrap_delete_RolePlayer_typedb_driver_bb72060ecdcaae0b(RolePlayer *_swig_go_0) {
  RolePlayer *arg1 = (RolePlayer *) 0 ;
  
  arg1 = *(RolePlayer **)&_swig_go_0; 
  
  delete_RolePlayer(arg1);
  
}


void _wrap_delete_RolePlayerIterator_typedb_driver_bb72060ecdcaae0b(RolePlayerIterator *_swig_go_0) {
  RolePlayerIterator *arg1 = (RolePlayerIterator *) 0 ;
  
  arg1 = *(RolePlayerIterator **)&_swig_go_0; 
  
  delete_RolePlayerIterator(arg1);
  
}


void _wrap_delete_ConceptMap_typedb_driver_bb72060ecdcaae0b(ConceptMap *_swig_go_0) {
  ConceptMap *arg1 = (ConceptMap *) 0 ;
  
  arg1 = *(ConceptMap **)&_swig_go_0; 
  
  delete_ConceptMap(arg1);
  
}


void _wrap_delete_ConceptMapIterator_typedb_driver_bb72060ecdcaae0b(ConceptMapIterator *_swig_go_0) {
  ConceptMapIterator *arg1 = (ConceptMapIterator *) 0 ;
  
  arg1 = *(ConceptMapIterator **)&_swig_go_0; 
  
  delete_ConceptMapIterator(arg1);
  
}


void _wrap_delete_Explainables_typedb_driver_bb72060ecdcaae0b(Explainables *_swig_go_0) {
  Explainables *arg1 = (Explainables *) 0 ;
  
  arg1 = *(Explainables **)&_swig_go_0; 
  
  delete_Explainables(arg1);
  
}


void _wrap_delete_Explainable_typedb_driver_bb72060ecdcaae0b(Explainable *_swig_go_0) {
  Explainable *arg1 = (Explainable *) 0 ;
  
  arg1 = *(Explainable **)&_swig_go_0; 
  
  delete_Explainable(arg1);
  
}


void _wrap_delete_ConceptMapGroup_typedb_driver_bb72060ecdcaae0b(ConceptMapGroup *_swig_go_0) {
  ConceptMapGroup *arg1 = (ConceptMapGroup *) 0 ;
  
  arg1 = *(ConceptMapGroup **)&_swig_go_0; 
  
  delete_ConceptMapGroup(arg1);
  
}


void _wrap_delete_ConceptMapGroupIterator_typedb_driver_bb72060ecdcaae0b(ConceptMapGroupIterator *_swig_go_0) {
  ConceptMapGroupIterator *arg1 = (ConceptMapGroupIterator *) 0 ;
  
  arg1 = *(ConceptMapGroupIterator **)&_swig_go_0; 
  
  delete_ConceptMapGroupIterator(arg1);
  
}


void _wrap_delete_StringIterator_typedb_driver_bb72060ecdcaae0b(StringIterator *_swig_go_0) {
  StringIterator *arg1 = (StringIterator *) 0 ;
  
  arg1 = *(StringIterator **)&_swig_go_0; 
  
  delete_StringIterator(arg1);
  
}


void _wrap_delete_StringPairIterator_typedb_driver_bb72060ecdcaae0b(StringPairIterator *_swig_go_0) {
  StringPairIterator *arg1 = (StringPairIterator *) 0 ;
  
  arg1 = *(StringPairIterator **)&_swig_go_0; 
  
  delete_StringPairIterator(arg1);
  
}


void _wrap_delete_ValueGroup_typedb_driver_bb72060ecdcaae0b(ValueGroup *_swig_go_0) {
  ValueGroup *arg1 = (ValueGroup *) 0 ;
  
  arg1 = *(ValueGroup **)&_swig_go_0; 
  
  delete_ValueGroup(arg1);
  
}


void _wrap_delete_ValueGroupIterator_typedb_driver_bb72060ecdcaae0b(ValueGroupIterator *_swig_go_0) {
  ValueGroupIterator *arg1 = (ValueGroupIterator *) 0 ;
  
  arg1 = *(ValueGroupIterator **)&_swig_go_0; 
  
  delete_ValueGroupIterator(arg1);
  
}


void _wrap_delete_Explanation_typedb_driver_bb72060ecdcaae0b(Explanation *_swig_go_0) {
  Explanation *arg1 = (Explanation *) 0 ;
  
  arg1 = *(Explanation **)&_swig_go_0; 
  
  delete_Explanation(arg1);
  
}


void _wrap_delete_ExplanationIterator_typedb_driver_bb72060ecdcaae0b(ExplanationIterator *_swig_go_0) {
  ExplanationIterator *arg1 = (ExplanationIterator *) 0 ;
  
  arg1 = *(ExplanationIterator **)&_swig_go_0; 
  
  delete_ExplanationIterator(arg1);
  
}


void _wrap_delete_Rule_typedb_driver_bb72060ecdcaae0b(Rule *_swig_go_0) {
  Rule *arg1 = (Rule *) 0 ;
  
  arg1 = *(Rule **)&_swig_go_0; 
  
  delete_Rule(arg1);
  
}


void _wrap_delete_RuleIterator_typedb_driver_bb72060ecdcaae0b(RuleIterator *_swig_go_0) {
  RuleIterator *arg1 = (RuleIterator *) 0 ;
  
  arg1 = *(RuleIterator **)&_swig_go_0; 
  
  delete_RuleIterator(arg1);
  
}


void _wrap_delete_BoolPromise_typedb_driver_bb72060ecdcaae0b(BoolPromise *_swig_go_0) {
  BoolPromise *arg1 = (BoolPromise *) 0 ;
  
  arg1 = *(BoolPromise **)&_swig_go_0; 
  
  delete_BoolPromise(arg1);
  
}


void _wrap_delete_ConceptPromise_typedb_driver_bb72060ecdcaae0b(ConceptPromise *_swig_go_0) {
  ConceptPromise *arg1 = (ConceptPromise *) 0 ;
  
  arg1 = *(ConceptPromise **)&_swig_go_0; 
  
  delete_ConceptPromise(arg1);
  
}


void _wrap_delete_RulePromise_typedb_driver_bb72060ecdcaae0b(RulePromise *_swig_go_0) {
  RulePromise *arg1 = (RulePromise *) 0 ;
  
  arg1 = *(RulePromise **)&_swig_go_0; 
  
  delete_RulePromise(arg1);
  
}


void _wrap_delete_StringPromise_typedb_driver_bb72060ecdcaae0b(StringPromise *_swig_go_0) {
  StringPromise *arg1 = (StringPromise *) 0 ;
  
  arg1 = *(StringPromise **)&_swig_go_0; 
  
  delete_StringPromise(arg1);
  
}


void _wrap_delete_VoidPromise_typedb_driver_bb72060ecdcaae0b(VoidPromise *_swig_go_0) {
  VoidPromise *arg1 = (VoidPromise *) 0 ;
  
  arg1 = *(VoidPromise **)&_swig_go_0; 
  
  delete_VoidPromise(arg1);
  
}


SessionCallbackDirector *_wrap__swig_NewDirectorSessionCallbackDirectorSessionCallbackDirector_typedb_driver_bb72060ecdcaae0b(intgo _swig_go_0) {
  int arg1 ;
  SessionCallbackDirector *result = 0 ;
  SessionCallbackDirector *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = new SwigDirector_SessionCallbackDirector(arg1);
  *(SessionCallbackDirector **)&_swig_go_result = (SessionCallbackDirector *)result; 
  return _swig_go_result;
}


void _wrap_DeleteDirectorSessionCallbackDirector_typedb_driver_bb72060ecdcaae0b(SessionCallbackDirector *_swig_go_0) {
  SessionCallbackDirector *arg1 = (SessionCallbackDirector *) 0 ;
  
  arg1 = *(SessionCallbackDirector **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_delete_SessionCallbackDirector_typedb_driver_bb72060ecdcaae0b(SessionCallbackDirector *_swig_go_0) {
  SessionCallbackDirector *arg1 = (SessionCallbackDirector *) 0 ;
  
  arg1 = *(SessionCallbackDirector **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_SessionCallbackDirector_callback_typedb_driver_bb72060ecdcaae0b(SessionCallbackDirector *_swig_go_0) {
  SessionCallbackDirector *arg1 = (SessionCallbackDirector *) 0 ;
  
  arg1 = *(SessionCallbackDirector **)&_swig_go_0; 
  
  (arg1)->callback();
  
}


void _wrap_sessionCallbacks_set_typedb_driver_bb72060ecdcaae0b(std::unordered_map< unsigned int,SessionCallbackDirector * > *_swig_go_0) {
  std::unordered_map< std::uintptr_t,SessionCallbackDirector * > *arg1 = (std::unordered_map< std::uintptr_t,SessionCallbackDirector * > *) 0 ;
  
  arg1 = *(std::unordered_map< std::uintptr_t,SessionCallbackDirector * > **)&_swig_go_0; 
  
  sessionCallbacks = *arg1;
  
}


std::unordered_map< unsigned int,SessionCallbackDirector * > *_wrap_sessionCallbacks_get_typedb_driver_bb72060ecdcaae0b() {
  std::unordered_map< std::uintptr_t,SessionCallbackDirector * > *result = 0 ;
  std::unordered_map< unsigned int,SessionCallbackDirector * > *_swig_go_result;
  
  
  result = (std::unordered_map< std::uintptr_t,SessionCallbackDirector * > *)&sessionCallbacks;
  *(std::unordered_map< std::uintptr_t,SessionCallbackDirector * > **)&_swig_go_result = (std::unordered_map< std::uintptr_t,SessionCallbackDirector * > *)result; 
  return _swig_go_result;
}


intgo _wrap_session_callback_register_typedb_driver_bb72060ecdcaae0b(SessionCallbackDirector *_swig_go_0) {
  SessionCallbackDirector *arg1 = (SessionCallbackDirector *) 0 ;
  std::uintptr_t result;
  intgo _swig_go_result;
  
  arg1 = *(SessionCallbackDirector **)&_swig_go_0; 
  
  result = (std::uintptr_t)session_callback_register(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_session_callback_execute_typedb_driver_bb72060ecdcaae0b(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  
  arg1 = *(void **)&_swig_go_0; 
  
  session_callback_execute(arg1);
  
}


void _wrap_session_callback_erase_typedb_driver_bb72060ecdcaae0b(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  
  arg1 = *(void **)&_swig_go_0; 
  
  session_callback_erase(arg1);
  
}


void _wrap_session_on_close_typedb_driver_bb72060ecdcaae0b(Session *_swig_go_0, SessionCallbackDirector *_swig_go_1) {
  Session *arg1 = (Session *) 0 ;
  SessionCallbackDirector *arg2 = (SessionCallbackDirector *) 0 ;
  
  arg1 = *(Session **)&_swig_go_0; 
  arg2 = *(SessionCallbackDirector **)&_swig_go_1; 
  
  session_on_close_register((Session const *)arg1,arg2);
  
}


void _wrap_session_on_reopen_typedb_driver_bb72060ecdcaae0b(Session *_swig_go_0, SessionCallbackDirector *_swig_go_1) {
  Session *arg1 = (Session *) 0 ;
  SessionCallbackDirector *arg2 = (SessionCallbackDirector *) 0 ;
  
  arg1 = *(Session **)&_swig_go_0; 
  arg2 = *(SessionCallbackDirector **)&_swig_go_1; 
  
  session_on_reopen_register((Session const *)arg1,arg2);
  
}


TransactionCallbackDirector *_wrap__swig_NewDirectorTransactionCallbackDirectorTransactionCallbackDirector_typedb_driver_bb72060ecdcaae0b(intgo _swig_go_0) {
  int arg1 ;
  TransactionCallbackDirector *result = 0 ;
  TransactionCallbackDirector *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = new SwigDirector_TransactionCallbackDirector(arg1);
  *(TransactionCallbackDirector **)&_swig_go_result = (TransactionCallbackDirector *)result; 
  return _swig_go_result;
}


void _wrap_DeleteDirectorTransactionCallbackDirector_typedb_driver_bb72060ecdcaae0b(TransactionCallbackDirector *_swig_go_0) {
  TransactionCallbackDirector *arg1 = (TransactionCallbackDirector *) 0 ;
  
  arg1 = *(TransactionCallbackDirector **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_delete_TransactionCallbackDirector_typedb_driver_bb72060ecdcaae0b(TransactionCallbackDirector *_swig_go_0) {
  TransactionCallbackDirector *arg1 = (TransactionCallbackDirector *) 0 ;
  
  arg1 = *(TransactionCallbackDirector **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_TransactionCallbackDirector_callback_typedb_driver_bb72060ecdcaae0b(TransactionCallbackDirector *_swig_go_0, Error *_swig_go_1) {
  TransactionCallbackDirector *arg1 = (TransactionCallbackDirector *) 0 ;
  Error *arg2 = (Error *) 0 ;
  
  arg1 = *(TransactionCallbackDirector **)&_swig_go_0; 
  arg2 = *(Error **)&_swig_go_1; 
  
  (arg1)->callback(arg2);
  
}


void _wrap_transaction_on_close_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, TransactionCallbackDirector *_swig_go_1) {
  Transaction *arg1 = (Transaction *) 0 ;
  TransactionCallbackDirector *arg2 = (TransactionCallbackDirector *) 0 ;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(TransactionCallbackDirector **)&_swig_go_1; 
  
  transaction_on_close_register((Transaction const *)arg1,arg2);
  
}


intgo _wrap_Data_typedb_driver_bb72060ecdcaae0b() {
  SessionType result;
  intgo _swig_go_result;
  
  
  result = Data;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Schema_typedb_driver_bb72060ecdcaae0b() {
  SessionType result;
  intgo _swig_go_result;
  
  
  result = Schema;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Read_typedb_driver_bb72060ecdcaae0b() {
  TransactionType result;
  intgo _swig_go_result;
  
  
  result = Read;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Write_typedb_driver_bb72060ecdcaae0b() {
  TransactionType result;
  intgo _swig_go_result;
  
  
  result = Write;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Explicit_typedb_driver_bb72060ecdcaae0b() {
  Transitivity result;
  intgo _swig_go_result;
  
  
  result = Explicit;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Transitive_typedb_driver_bb72060ecdcaae0b() {
  Transitivity result;
  intgo _swig_go_result;
  
  
  result = Transitive;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Object_typedb_driver_bb72060ecdcaae0b() {
  ValueType result;
  intgo _swig_go_result;
  
  
  result = Object;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Boolean_typedb_driver_bb72060ecdcaae0b() {
  ValueType result;
  intgo _swig_go_result;
  
  
  result = Boolean;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Long_typedb_driver_bb72060ecdcaae0b() {
  ValueType result;
  intgo _swig_go_result;
  
  
  result = Long;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Double_typedb_driver_bb72060ecdcaae0b() {
  ValueType result;
  intgo _swig_go_result;
  
  
  result = Double;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_String_typedb_driver_bb72060ecdcaae0b() {
  ValueType result;
  intgo _swig_go_result;
  
  
  result = String;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_DateTime_typedb_driver_bb72060ecdcaae0b() {
  ValueType result;
  intgo _swig_go_result;
  
  
  result = DateTime;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_StringPair__0_set_typedb_driver_bb72060ecdcaae0b(StringPair *_swig_go_0, _gostring_ _swig_go_1) {
  StringPair *arg1 = (StringPair *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(StringPair **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  {
    delete [] arg1->_0;
    if (arg2) {
      arg1->_0 = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->_0, (const char *)arg2);
    } else {
      arg1->_0 = 0;
    }
  }
  
  free(arg2); 
}


_gostring_ _wrap_StringPair__0_get_typedb_driver_bb72060ecdcaae0b(StringPair *_swig_go_0) {
  StringPair *arg1 = (StringPair *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(StringPair **)&_swig_go_0; 
  
  result = (char *) ((arg1)->_0);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_StringPair__1_set_typedb_driver_bb72060ecdcaae0b(StringPair *_swig_go_0, _gostring_ _swig_go_1) {
  StringPair *arg1 = (StringPair *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(StringPair **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  {
    delete [] arg1->_1;
    if (arg2) {
      arg1->_1 = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->_1, (const char *)arg2);
    } else {
      arg1->_1 = 0;
    }
  }
  
  free(arg2); 
}


_gostring_ _wrap_StringPair__1_get_typedb_driver_bb72060ecdcaae0b(StringPair *_swig_go_0) {
  StringPair *arg1 = (StringPair *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(StringPair **)&_swig_go_0; 
  
  result = (char *) ((arg1)->_1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_delete_StringPair_typedb_driver_bb72060ecdcaae0b(StringPair *_swig_go_0) {
  StringPair *arg1 = (StringPair *) 0 ;
  
  arg1 = *(StringPair **)&_swig_go_0; 
  
  delete arg1;
  
}


StringIterator *_wrap_concept_map_get_variables_typedb_driver_bb72060ecdcaae0b(ConceptMap *_swig_go_0) {
  ConceptMap *arg1 = (ConceptMap *) 0 ;
  StringIterator *result = 0 ;
  StringIterator *_swig_go_result;
  
  arg1 = *(ConceptMap **)&_swig_go_0; 
  
  result = (StringIterator *)concept_map_get_variables((ConceptMap const *)arg1);
  *(StringIterator **)&_swig_go_result = (StringIterator *)result; 
  return _swig_go_result;
}


ConceptIterator *_wrap_concept_map_get_values_typedb_driver_bb72060ecdcaae0b(ConceptMap *_swig_go_0) {
  ConceptMap *arg1 = (ConceptMap *) 0 ;
  ConceptIterator *result = 0 ;
  ConceptIterator *_swig_go_result;
  
  arg1 = *(ConceptMap **)&_swig_go_0; 
  
  result = (ConceptIterator *)concept_map_get_values((ConceptMap const *)arg1);
  *(ConceptIterator **)&_swig_go_result = (ConceptIterator *)result; 
  return _swig_go_result;
}


Concept *_wrap_concept_map_get_typedb_driver_bb72060ecdcaae0b(ConceptMap *_swig_go_0, _gostring_ _swig_go_1) {
  ConceptMap *arg1 = (ConceptMap *) 0 ;
  char *arg2 = (char *) 0 ;
  Concept *result = 0 ;
  Concept *_swig_go_result;
  
  arg1 = *(ConceptMap **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = (Concept *)concept_map_get((ConceptMap const *)arg1,(char const *)arg2);
  *(Concept **)&_swig_go_result = (Concept *)result; 
  free(arg2); 
  return _swig_go_result;
}


Explainables *_wrap_concept_map_get_explainables_typedb_driver_bb72060ecdcaae0b(ConceptMap *_swig_go_0) {
  ConceptMap *arg1 = (ConceptMap *) 0 ;
  Explainables *result = 0 ;
  Explainables *_swig_go_result;
  
  arg1 = *(ConceptMap **)&_swig_go_0; 
  
  result = (Explainables *)concept_map_get_explainables((ConceptMap const *)arg1);
  *(Explainables **)&_swig_go_result = (Explainables *)result; 
  return _swig_go_result;
}


bool _wrap_concept_map_equals_typedb_driver_bb72060ecdcaae0b(ConceptMap *_swig_go_0, ConceptMap *_swig_go_1) {
  ConceptMap *arg1 = (ConceptMap *) 0 ;
  ConceptMap *arg2 = (ConceptMap *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(ConceptMap **)&_swig_go_0; 
  arg2 = *(ConceptMap **)&_swig_go_1; 
  
  result = (bool)concept_map_equals((ConceptMap const *)arg1,(ConceptMap const *)arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_concept_map_to_string_typedb_driver_bb72060ecdcaae0b(ConceptMap *_swig_go_0) {
  ConceptMap *arg1 = (ConceptMap *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(ConceptMap **)&_swig_go_0; 
  
  result = (char *)concept_map_to_string((ConceptMap const *)arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  string_free(result);
  return _swig_go_result;
}


bool _wrap_explainables_equals_typedb_driver_bb72060ecdcaae0b(Explainables *_swig_go_0, Explainables *_swig_go_1) {
  Explainables *arg1 = (Explainables *) 0 ;
  Explainables *arg2 = (Explainables *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Explainables **)&_swig_go_0; 
  arg2 = *(Explainables **)&_swig_go_1; 
  
  result = (bool)explainables_equals((Explainables const *)arg1,(Explainables const *)arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_explainables_to_string_typedb_driver_bb72060ecdcaae0b(Explainables *_swig_go_0) {
  Explainables *arg1 = (Explainables *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(Explainables **)&_swig_go_0; 
  
  result = (char *)explainables_to_string((Explainables const *)arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  string_free(result);
  return _swig_go_result;
}


Explainable *_wrap_explainables_get_relation_typedb_driver_bb72060ecdcaae0b(Explainables *_swig_go_0, _gostring_ _swig_go_1) {
  Explainables *arg1 = (Explainables *) 0 ;
  char *arg2 = (char *) 0 ;
  Explainable *result = 0 ;
  Explainable *_swig_go_result;
  
  arg1 = *(Explainables **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = (Explainable *)explainables_get_relation((Explainables const *)arg1,(char const *)arg2);
  *(Explainable **)&_swig_go_result = (Explainable *)result; 
  free(arg2); 
  return _swig_go_result;
}


Explainable *_wrap_explainables_get_attribute_typedb_driver_bb72060ecdcaae0b(Explainables *_swig_go_0, _gostring_ _swig_go_1) {
  Explainables *arg1 = (Explainables *) 0 ;
  char *arg2 = (char *) 0 ;
  Explainable *result = 0 ;
  Explainable *_swig_go_result;
  
  arg1 = *(Explainables **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = (Explainable *)explainables_get_attribute((Explainables const *)arg1,(char const *)arg2);
  *(Explainable **)&_swig_go_result = (Explainable *)result; 
  free(arg2); 
  return _swig_go_result;
}


Explainable *_wrap_explainables_get_ownership_typedb_driver_bb72060ecdcaae0b(Explainables *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  Explainables *arg1 = (Explainables *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  Explainable *result = 0 ;
  Explainable *_swig_go_result;
  
  arg1 = *(Explainables **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  
  result = (Explainable *)explainables_get_ownership((Explainables const *)arg1,(char const *)arg2,(char const *)arg3);
  *(Explainable **)&_swig_go_result = (Explainable *)result; 
  free(arg2); 
  free(arg3); 
  return _swig_go_result;
}


StringIterator *_wrap_explainables_get_relations_keys_typedb_driver_bb72060ecdcaae0b(Explainables *_swig_go_0) {
  Explainables *arg1 = (Explainables *) 0 ;
  StringIterator *result = 0 ;
  StringIterator *_swig_go_result;
  
  arg1 = *(Explainables **)&_swig_go_0; 
  
  result = (StringIterator *)explainables_get_relations_keys((Explainables const *)arg1);
  *(StringIterator **)&_swig_go_result = (StringIterator *)result; 
  return _swig_go_result;
}


StringIterator *_wrap_explainables_get_attributes_keys_typedb_driver_bb72060ecdcaae0b(Explainables *_swig_go_0) {
  Explainables *arg1 = (Explainables *) 0 ;
  StringIterator *result = 0 ;
  StringIterator *_swig_go_result;
  
  arg1 = *(Explainables **)&_swig_go_0; 
  
  result = (StringIterator *)explainables_get_attributes_keys((Explainables const *)arg1);
  *(StringIterator **)&_swig_go_result = (StringIterator *)result; 
  return _swig_go_result;
}


StringPairIterator *_wrap_explainables_get_ownerships_keys_typedb_driver_bb72060ecdcaae0b(Explainables *_swig_go_0) {
  Explainables *arg1 = (Explainables *) 0 ;
  StringPairIterator *result = 0 ;
  StringPairIterator *_swig_go_result;
  
  arg1 = *(Explainables **)&_swig_go_0; 
  
  result = (StringPairIterator *)explainables_get_ownerships_keys((Explainables const *)arg1);
  *(StringPairIterator **)&_swig_go_result = (StringPairIterator *)result; 
  return _swig_go_result;
}


long long _wrap_explainable_get_id_typedb_driver_bb72060ecdcaae0b(Explainable *_swig_go_0) {
  Explainable *arg1 = (Explainable *) 0 ;
  int64_t result;
  long long _swig_go_result;
  
  arg1 = *(Explainable **)&_swig_go_0; 
  
  result = (int64_t)explainable_get_id((Explainable const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_explainable_get_conjunction_typedb_driver_bb72060ecdcaae0b(Explainable *_swig_go_0) {
  Explainable *arg1 = (Explainable *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(Explainable **)&_swig_go_0; 
  
  result = (char *)explainable_get_conjunction((Explainable const *)arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  string_free(result);
  return _swig_go_result;
}


bool _wrap_explanation_equals_typedb_driver_bb72060ecdcaae0b(Explanation *_swig_go_0, Explanation *_swig_go_1) {
  Explanation *arg1 = (Explanation *) 0 ;
  Explanation *arg2 = (Explanation *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Explanation **)&_swig_go_0; 
  arg2 = *(Explanation **)&_swig_go_1; 
  
  result = (bool)explanation_equals((Explanation const *)arg1,(Explanation const *)arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_explanation_to_string_typedb_driver_bb72060ecdcaae0b(Explanation *_swig_go_0) {
  Explanation *arg1 = (Explanation *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(Explanation **)&_swig_go_0; 
  
  result = (char *)explanation_to_string((Explanation const *)arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  string_free(result);
  return _swig_go_result;
}


Rule *_wrap_explanation_get_rule_typedb_driver_bb72060ecdcaae0b(Explanation *_swig_go_0) {
  Explanation *arg1 = (Explanation *) 0 ;
  Rule *result = 0 ;
  Rule *_swig_go_result;
  
  arg1 = *(Explanation **)&_swig_go_0; 
  
  result = (Rule *)explanation_get_rule((Explanation const *)arg1);
  *(Rule **)&_swig_go_result = (Rule *)result; 
  return _swig_go_result;
}


ConceptMap *_wrap_explanation_get_conclusion_typedb_driver_bb72060ecdcaae0b(Explanation *_swig_go_0) {
  Explanation *arg1 = (Explanation *) 0 ;
  ConceptMap *result = 0 ;
  ConceptMap *_swig_go_result;
  
  arg1 = *(Explanation **)&_swig_go_0; 
  
  result = (ConceptMap *)explanation_get_conclusion((Explanation const *)arg1);
  *(ConceptMap **)&_swig_go_result = (ConceptMap *)result; 
  return _swig_go_result;
}


ConceptMap *_wrap_explanation_get_condition_typedb_driver_bb72060ecdcaae0b(Explanation *_swig_go_0) {
  Explanation *arg1 = (Explanation *) 0 ;
  ConceptMap *result = 0 ;
  ConceptMap *_swig_go_result;
  
  arg1 = *(Explanation **)&_swig_go_0; 
  
  result = (ConceptMap *)explanation_get_condition((Explanation const *)arg1);
  *(ConceptMap **)&_swig_go_result = (ConceptMap *)result; 
  return _swig_go_result;
}


StringIterator *_wrap_explanation_get_mapped_variables_typedb_driver_bb72060ecdcaae0b(Explanation *_swig_go_0) {
  Explanation *arg1 = (Explanation *) 0 ;
  StringIterator *result = 0 ;
  StringIterator *_swig_go_result;
  
  arg1 = *(Explanation **)&_swig_go_0; 
  
  result = (StringIterator *)explanation_get_mapped_variables((Explanation const *)arg1);
  *(StringIterator **)&_swig_go_result = (StringIterator *)result; 
  return _swig_go_result;
}


StringIterator *_wrap_explanation_get_mapping_typedb_driver_bb72060ecdcaae0b(Explanation *_swig_go_0, _gostring_ _swig_go_1) {
  Explanation *arg1 = (Explanation *) 0 ;
  char *arg2 = (char *) 0 ;
  StringIterator *result = 0 ;
  StringIterator *_swig_go_result;
  
  arg1 = *(Explanation **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = (StringIterator *)explanation_get_mapping((Explanation const *)arg1,(char const *)arg2);
  *(StringIterator **)&_swig_go_result = (StringIterator *)result; 
  free(arg2); 
  return _swig_go_result;
}


Concept *_wrap_concept_map_group_get_owner_typedb_driver_bb72060ecdcaae0b(ConceptMapGroup *_swig_go_0) {
  ConceptMapGroup *arg1 = (ConceptMapGroup *) 0 ;
  Concept *result = 0 ;
  Concept *_swig_go_result;
  
  arg1 = *(ConceptMapGroup **)&_swig_go_0; 
  
  result = (Concept *)concept_map_group_get_owner((ConceptMapGroup const *)arg1);
  *(Concept **)&_swig_go_result = (Concept *)result; 
  return _swig_go_result;
}


ConceptMapIterator *_wrap_concept_map_group_get_concept_maps_typedb_driver_bb72060ecdcaae0b(ConceptMapGroup *_swig_go_0) {
  ConceptMapGroup *arg1 = (ConceptMapGroup *) 0 ;
  ConceptMapIterator *result = 0 ;
  ConceptMapIterator *_swig_go_result;
  
  arg1 = *(ConceptMapGroup **)&_swig_go_0; 
  
  result = (ConceptMapIterator *)concept_map_group_get_concept_maps((ConceptMapGroup const *)arg1);
  *(ConceptMapIterator **)&_swig_go_result = (ConceptMapIterator *)result; 
  return _swig_go_result;
}


_gostring_ _wrap_concept_map_group_to_string_typedb_driver_bb72060ecdcaae0b(ConceptMapGroup *_swig_go_0) {
  ConceptMapGroup *arg1 = (ConceptMapGroup *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(ConceptMapGroup **)&_swig_go_0; 
  
  result = (char *)concept_map_group_to_string((ConceptMapGroup const *)arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  string_free(result);
  return _swig_go_result;
}


bool _wrap_concept_map_group_equals_typedb_driver_bb72060ecdcaae0b(ConceptMapGroup *_swig_go_0, ConceptMapGroup *_swig_go_1) {
  ConceptMapGroup *arg1 = (ConceptMapGroup *) 0 ;
  ConceptMapGroup *arg2 = (ConceptMapGroup *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(ConceptMapGroup **)&_swig_go_0; 
  arg2 = *(ConceptMapGroup **)&_swig_go_1; 
  
  result = (bool)concept_map_group_equals((ConceptMapGroup const *)arg1,(ConceptMapGroup const *)arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_value_group_to_string_typedb_driver_bb72060ecdcaae0b(ValueGroup *_swig_go_0) {
  ValueGroup *arg1 = (ValueGroup *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(ValueGroup **)&_swig_go_0; 
  
  result = (char *)value_group_to_string((ValueGroup const *)arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  string_free(result);
  return _swig_go_result;
}


bool _wrap_value_group_equals_typedb_driver_bb72060ecdcaae0b(ValueGroup *_swig_go_0, ValueGroup *_swig_go_1) {
  ValueGroup *arg1 = (ValueGroup *) 0 ;
  ValueGroup *arg2 = (ValueGroup *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(ValueGroup **)&_swig_go_0; 
  arg2 = *(ValueGroup **)&_swig_go_1; 
  
  result = (bool)value_group_equals((ValueGroup const *)arg1,(ValueGroup const *)arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


Concept *_wrap_value_group_get_owner_typedb_driver_bb72060ecdcaae0b(ValueGroup *_swig_go_0) {
  ValueGroup *arg1 = (ValueGroup *) 0 ;
  Concept *result = 0 ;
  Concept *_swig_go_result;
  
  arg1 = *(ValueGroup **)&_swig_go_0; 
  
  result = (Concept *)value_group_get_owner(arg1);
  *(Concept **)&_swig_go_result = (Concept *)result; 
  return _swig_go_result;
}


Concept *_wrap_value_group_get_value_typedb_driver_bb72060ecdcaae0b(ValueGroup *_swig_go_0) {
  ValueGroup *arg1 = (ValueGroup *) 0 ;
  Concept *result = 0 ;
  Concept *_swig_go_result;
  
  arg1 = *(ValueGroup **)&_swig_go_0; 
  
  result = (Concept *)value_group_get_value(arg1);
  *(Concept **)&_swig_go_result = (Concept *)result; 
  return _swig_go_result;
}


_gostring_ _wrap_string_iterator_next_typedb_driver_bb72060ecdcaae0b(StringIterator *_swig_go_0) {
  StringIterator *arg1 = (StringIterator *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(StringIterator **)&_swig_go_0; 
  
  result = (char *)string_iterator_next(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  string_free(result);
  return _swig_go_result;
}


void _wrap_string_pair_drop_typedb_driver_bb72060ecdcaae0b(StringPair *_swig_go_0) {
  StringPair *arg1 = (StringPair *) 0 ;
  
  arg1 = *(StringPair **)&_swig_go_0; 
  
  string_pair_drop(arg1);
  
}


StringPair *_wrap_string_pair_iterator_next_typedb_driver_bb72060ecdcaae0b(StringPairIterator *_swig_go_0) {
  StringPairIterator *arg1 = (StringPairIterator *) 0 ;
  StringPair *result = 0 ;
  StringPair *_swig_go_result;
  
  arg1 = *(StringPairIterator **)&_swig_go_0; 
  
  result = (StringPair *)string_pair_iterator_next(arg1);
  *(StringPair **)&_swig_go_result = (StringPair *)result; 
  return _swig_go_result;
}


Concept *_wrap_concept_promise_resolve_typedb_driver_bb72060ecdcaae0b(ConceptPromise *_swig_go_0) {
  ConceptPromise *arg1 = (ConceptPromise *) 0 ;
  Concept *result = 0 ;
  Concept *_swig_go_result;
  
  arg1 = *(ConceptPromise **)&_swig_go_0; 
  
  result = (Concept *)concept_promise_resolve(arg1);
  *(Concept **)&_swig_go_result = (Concept *)result; 
  return _swig_go_result;
}


Concept *_wrap_concept_iterator_next_typedb_driver_bb72060ecdcaae0b(ConceptIterator *_swig_go_0) {
  ConceptIterator *arg1 = (ConceptIterator *) 0 ;
  Concept *result = 0 ;
  Concept *_swig_go_result;
  
  arg1 = *(ConceptIterator **)&_swig_go_0; 
  
  result = (Concept *)concept_iterator_next(arg1);
  *(Concept **)&_swig_go_result = (Concept *)result; 
  return _swig_go_result;
}


RolePlayer *_wrap_role_player_iterator_next_typedb_driver_bb72060ecdcaae0b(RolePlayerIterator *_swig_go_0) {
  RolePlayerIterator *arg1 = (RolePlayerIterator *) 0 ;
  RolePlayer *result = 0 ;
  RolePlayer *_swig_go_result;
  
  arg1 = *(RolePlayerIterator **)&_swig_go_0; 
  
  result = (RolePlayer *)role_player_iterator_next(arg1);
  *(RolePlayer **)&_swig_go_result = (RolePlayer *)result; 
  return _swig_go_result;
}


Concept *_wrap_role_player_get_role_type_typedb_driver_bb72060ecdcaae0b(RolePlayer *_swig_go_0) {
  RolePlayer *arg1 = (RolePlayer *) 0 ;
  Concept *result = 0 ;
  Concept *_swig_go_result;
  
  arg1 = *(RolePlayer **)&_swig_go_0; 
  
  result = (Concept *)role_player_get_role_type((RolePlayer const *)arg1);
  *(Concept **)&_swig_go_result = (Concept *)result; 
  return _swig_go_result;
}


Concept *_wrap_role_player_get_player_typedb_driver_bb72060ecdcaae0b(RolePlayer *_swig_go_0) {
  RolePlayer *arg1 = (RolePlayer *) 0 ;
  Concept *result = 0 ;
  Concept *_swig_go_result;
  
  arg1 = *(RolePlayer **)&_swig_go_0; 
  
  result = (Concept *)role_player_get_player((RolePlayer const *)arg1);
  *(Concept **)&_swig_go_result = (Concept *)result; 
  return _swig_go_result;
}


Concept *_wrap_value_new_boolean_typedb_driver_bb72060ecdcaae0b(bool _swig_go_0) {
  bool arg1 ;
  Concept *result = 0 ;
  Concept *_swig_go_result;
  
  arg1 = (bool)_swig_go_0; 
  
  result = (Concept *)value_new_boolean(arg1);
  *(Concept **)&_swig_go_result = (Concept *)result; 
  return _swig_go_result;
}


Concept *_wrap_value_new_long_typedb_driver_bb72060ecdcaae0b(long long _swig_go_0) {
  int64_t arg1 ;
  Concept *result = 0 ;
  Concept *_swig_go_result;
  
  arg1 = (int64_t)_swig_go_0; 
  
  result = (Concept *)value_new_long(arg1);
  *(Concept **)&_swig_go_result = (Concept *)result; 
  return _swig_go_result;
}


Concept *_wrap_value_new_double_typedb_driver_bb72060ecdcaae0b(double _swig_go_0) {
  double arg1 ;
  Concept *result = 0 ;
  Concept *_swig_go_result;
  
  arg1 = (double)_swig_go_0; 
  
  result = (Concept *)value_new_double(arg1);
  *(Concept **)&_swig_go_result = (Concept *)result; 
  return _swig_go_result;
}


Concept *_wrap_value_new_string_typedb_driver_bb72060ecdcaae0b(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  Concept *result = 0 ;
  Concept *_swig_go_result;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  
  result = (Concept *)value_new_string((char const *)arg1);
  *(Concept **)&_swig_go_result = (Concept *)result; 
  free(arg1); 
  return _swig_go_result;
}


Concept *_wrap_value_new_date_time_from_millis_typedb_driver_bb72060ecdcaae0b(long long _swig_go_0) {
  int64_t arg1 ;
  Concept *result = 0 ;
  Concept *_swig_go_result;
  
  arg1 = (int64_t)_swig_go_0; 
  
  result = (Concept *)value_new_date_time_from_millis(arg1);
  *(Concept **)&_swig_go_result = (Concept *)result; 
  return _swig_go_result;
}


bool _wrap_value_is_boolean_typedb_driver_bb72060ecdcaae0b(Concept *_swig_go_0) {
  Concept *arg1 = (Concept *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Concept **)&_swig_go_0; 
  
  result = (bool)value_is_boolean((Concept const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_value_is_long_typedb_driver_bb72060ecdcaae0b(Concept *_swig_go_0) {
  Concept *arg1 = (Concept *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Concept **)&_swig_go_0; 
  
  result = (bool)value_is_long((Concept const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_value_is_double_typedb_driver_bb72060ecdcaae0b(Concept *_swig_go_0) {
  Concept *arg1 = (Concept *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Concept **)&_swig_go_0; 
  
  result = (bool)value_is_double((Concept const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_value_is_string_typedb_driver_bb72060ecdcaae0b(Concept *_swig_go_0) {
  Concept *arg1 = (Concept *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Concept **)&_swig_go_0; 
  
  result = (bool)value_is_string((Concept const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_value_is_date_time_typedb_driver_bb72060ecdcaae0b(Concept *_swig_go_0) {
  Concept *arg1 = (Concept *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Concept **)&_swig_go_0; 
  
  result = (bool)value_is_date_time((Concept const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_value_get_boolean_typedb_driver_bb72060ecdcaae0b(Concept *_swig_go_0) {
  Concept *arg1 = (Concept *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Concept **)&_swig_go_0; 
  
  result = (bool)value_get_boolean((Concept const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_value_get_long_typedb_driver_bb72060ecdcaae0b(Concept *_swig_go_0) {
  Concept *arg1 = (Concept *) 0 ;
  int64_t result;
  long long _swig_go_result;
  
  arg1 = *(Concept **)&_swig_go_0; 
  
  result = (int64_t)value_get_long((Concept const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_value_get_double_typedb_driver_bb72060ecdcaae0b(Concept *_swig_go_0) {
  Concept *arg1 = (Concept *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(Concept **)&_swig_go_0; 
  
  result = (double)value_get_double((Concept const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_value_get_string_typedb_driver_bb72060ecdcaae0b(Concept *_swig_go_0) {
  Concept *arg1 = (Concept *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(Concept **)&_swig_go_0; 
  
  result = (char *)value_get_string((Concept const *)arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  string_free(result);
  return _swig_go_result;
}


long long _wrap_value_get_date_time_as_millis_typedb_driver_bb72060ecdcaae0b(Concept *_swig_go_0) {
  Concept *arg1 = (Concept *) 0 ;
  int64_t result;
  long long _swig_go_result;
  
  arg1 = *(Concept **)&_swig_go_0; 
  
  result = (int64_t)value_get_date_time_as_millis((Concept const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


Annotation *_wrap_annotation_new_key_typedb_driver_bb72060ecdcaae0b() {
  Annotation *result = 0 ;
  Annotation *_swig_go_result;
  
  
  result = (Annotation *)annotation_new_key();
  *(Annotation **)&_swig_go_result = (Annotation *)result; 
  return _swig_go_result;
}


Annotation *_wrap_annotation_new_unique_typedb_driver_bb72060ecdcaae0b() {
  Annotation *result = 0 ;
  Annotation *_swig_go_result;
  
  
  result = (Annotation *)annotation_new_unique();
  *(Annotation **)&_swig_go_result = (Annotation *)result; 
  return _swig_go_result;
}


_gostring_ _wrap_annotation_to_string_typedb_driver_bb72060ecdcaae0b(Annotation *_swig_go_0) {
  Annotation *arg1 = (Annotation *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(Annotation **)&_swig_go_0; 
  
  result = (char *)annotation_to_string((Annotation const *)arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  string_free(result);
  return _swig_go_result;
}


bool _wrap_annotation_equals_typedb_driver_bb72060ecdcaae0b(Annotation *_swig_go_0, Annotation *_swig_go_1) {
  Annotation *arg1 = (Annotation *) 0 ;
  Annotation *arg2 = (Annotation *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Annotation **)&_swig_go_0; 
  arg2 = *(Annotation **)&_swig_go_1; 
  
  result = (bool)annotation_equals((Annotation const *)arg1,(Annotation const *)arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_annotation_is_key_typedb_driver_bb72060ecdcaae0b(Annotation *_swig_go_0) {
  Annotation *arg1 = (Annotation *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Annotation **)&_swig_go_0; 
  
  result = (bool)annotation_is_key((Annotation const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_annotation_is_unique_typedb_driver_bb72060ecdcaae0b(Annotation *_swig_go_0) {
  Annotation *arg1 = (Annotation *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Annotation **)&_swig_go_0; 
  
  result = (bool)annotation_is_unique((Annotation const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_concept_equals_typedb_driver_bb72060ecdcaae0b(Concept *_swig_go_0, Concept *_swig_go_1) {
  Concept *arg1 = (Concept *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Concept **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  
  result = (bool)concept_equals((Concept const *)arg1,(Concept const *)arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_concept_is_entity_typedb_driver_bb72060ecdcaae0b(Concept *_swig_go_0) {
  Concept *arg1 = (Concept *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Concept **)&_swig_go_0; 
  
  result = (bool)concept_is_entity((Concept const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_concept_is_relation_typedb_driver_bb72060ecdcaae0b(Concept *_swig_go_0) {
  Concept *arg1 = (Concept *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Concept **)&_swig_go_0; 
  
  result = (bool)concept_is_relation((Concept const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_concept_is_attribute_typedb_driver_bb72060ecdcaae0b(Concept *_swig_go_0) {
  Concept *arg1 = (Concept *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Concept **)&_swig_go_0; 
  
  result = (bool)concept_is_attribute((Concept const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_concept_is_value_typedb_driver_bb72060ecdcaae0b(Concept *_swig_go_0) {
  Concept *arg1 = (Concept *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Concept **)&_swig_go_0; 
  
  result = (bool)concept_is_value((Concept const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_concept_is_root_thing_type_typedb_driver_bb72060ecdcaae0b(Concept *_swig_go_0) {
  Concept *arg1 = (Concept *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Concept **)&_swig_go_0; 
  
  result = (bool)concept_is_root_thing_type((Concept const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_concept_is_entity_type_typedb_driver_bb72060ecdcaae0b(Concept *_swig_go_0) {
  Concept *arg1 = (Concept *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Concept **)&_swig_go_0; 
  
  result = (bool)concept_is_entity_type((Concept const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_concept_is_relation_type_typedb_driver_bb72060ecdcaae0b(Concept *_swig_go_0) {
  Concept *arg1 = (Concept *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Concept **)&_swig_go_0; 
  
  result = (bool)concept_is_relation_type((Concept const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_concept_is_attribute_type_typedb_driver_bb72060ecdcaae0b(Concept *_swig_go_0) {
  Concept *arg1 = (Concept *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Concept **)&_swig_go_0; 
  
  result = (bool)concept_is_attribute_type((Concept const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_concept_is_role_type_typedb_driver_bb72060ecdcaae0b(Concept *_swig_go_0) {
  Concept *arg1 = (Concept *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Concept **)&_swig_go_0; 
  
  result = (bool)concept_is_role_type((Concept const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_concept_to_string_typedb_driver_bb72060ecdcaae0b(Concept *_swig_go_0) {
  Concept *arg1 = (Concept *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(Concept **)&_swig_go_0; 
  
  result = (char *)concept_to_string((Concept const *)arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  string_free(result);
  return _swig_go_result;
}


Concept *_wrap_concepts_get_root_entity_type_typedb_driver_bb72060ecdcaae0b() {
  Concept *result = 0 ;
  Concept *_swig_go_result;
  
  
  result = (Concept *)concepts_get_root_entity_type();
  *(Concept **)&_swig_go_result = (Concept *)result; 
  return _swig_go_result;
}


Concept *_wrap_concepts_get_root_relation_type_typedb_driver_bb72060ecdcaae0b() {
  Concept *result = 0 ;
  Concept *_swig_go_result;
  
  
  result = (Concept *)concepts_get_root_relation_type();
  *(Concept **)&_swig_go_result = (Concept *)result; 
  return _swig_go_result;
}


Concept *_wrap_concepts_get_root_attribute_type_typedb_driver_bb72060ecdcaae0b() {
  Concept *result = 0 ;
  Concept *_swig_go_result;
  
  
  result = (Concept *)concepts_get_root_attribute_type();
  *(Concept **)&_swig_go_result = (Concept *)result; 
  return _swig_go_result;
}


ConceptPromise *_wrap_concepts_get_entity_type_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, _gostring_ _swig_go_1) {
  Transaction *arg1 = (Transaction *) 0 ;
  char *arg2 = (char *) 0 ;
  ConceptPromise *result = 0 ;
  ConceptPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = (ConceptPromise *)concepts_get_entity_type((Transaction const *)arg1,(char const *)arg2);
  *(ConceptPromise **)&_swig_go_result = (ConceptPromise *)result; 
  free(arg2); 
  return _swig_go_result;
}


ConceptPromise *_wrap_concepts_get_relation_type_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, _gostring_ _swig_go_1) {
  Transaction *arg1 = (Transaction *) 0 ;
  char *arg2 = (char *) 0 ;
  ConceptPromise *result = 0 ;
  ConceptPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = (ConceptPromise *)concepts_get_relation_type((Transaction const *)arg1,(char const *)arg2);
  *(ConceptPromise **)&_swig_go_result = (ConceptPromise *)result; 
  free(arg2); 
  return _swig_go_result;
}


ConceptPromise *_wrap_concepts_get_attribute_type_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, _gostring_ _swig_go_1) {
  Transaction *arg1 = (Transaction *) 0 ;
  char *arg2 = (char *) 0 ;
  ConceptPromise *result = 0 ;
  ConceptPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = (ConceptPromise *)concepts_get_attribute_type((Transaction const *)arg1,(char const *)arg2);
  *(ConceptPromise **)&_swig_go_result = (ConceptPromise *)result; 
  free(arg2); 
  return _swig_go_result;
}


ConceptPromise *_wrap_concepts_put_entity_type_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, _gostring_ _swig_go_1) {
  Transaction *arg1 = (Transaction *) 0 ;
  char *arg2 = (char *) 0 ;
  ConceptPromise *result = 0 ;
  ConceptPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = (ConceptPromise *)concepts_put_entity_type((Transaction const *)arg1,(char const *)arg2);
  *(ConceptPromise **)&_swig_go_result = (ConceptPromise *)result; 
  free(arg2); 
  return _swig_go_result;
}


ConceptPromise *_wrap_concepts_put_relation_type_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, _gostring_ _swig_go_1) {
  Transaction *arg1 = (Transaction *) 0 ;
  char *arg2 = (char *) 0 ;
  ConceptPromise *result = 0 ;
  ConceptPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = (ConceptPromise *)concepts_put_relation_type((Transaction const *)arg1,(char const *)arg2);
  *(ConceptPromise **)&_swig_go_result = (ConceptPromise *)result; 
  free(arg2); 
  return _swig_go_result;
}


ConceptPromise *_wrap_concepts_put_attribute_type_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  Transaction *arg1 = (Transaction *) 0 ;
  char *arg2 = (char *) 0 ;
  enum ValueType arg3 ;
  ConceptPromise *result = 0 ;
  ConceptPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (enum ValueType)_swig_go_2; 
  
  result = (ConceptPromise *)concepts_put_attribute_type((Transaction const *)arg1,(char const *)arg2,arg3);
  *(ConceptPromise **)&_swig_go_result = (ConceptPromise *)result; 
  free(arg2); 
  return _swig_go_result;
}


ConceptPromise *_wrap_concepts_get_entity_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, _gostring_ _swig_go_1) {
  Transaction *arg1 = (Transaction *) 0 ;
  char *arg2 = (char *) 0 ;
  ConceptPromise *result = 0 ;
  ConceptPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = (ConceptPromise *)concepts_get_entity((Transaction const *)arg1,(char const *)arg2);
  *(ConceptPromise **)&_swig_go_result = (ConceptPromise *)result; 
  free(arg2); 
  return _swig_go_result;
}


ConceptPromise *_wrap_concepts_get_relation_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, _gostring_ _swig_go_1) {
  Transaction *arg1 = (Transaction *) 0 ;
  char *arg2 = (char *) 0 ;
  ConceptPromise *result = 0 ;
  ConceptPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = (ConceptPromise *)concepts_get_relation((Transaction const *)arg1,(char const *)arg2);
  *(ConceptPromise **)&_swig_go_result = (ConceptPromise *)result; 
  free(arg2); 
  return _swig_go_result;
}


ConceptPromise *_wrap_concepts_get_attribute_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, _gostring_ _swig_go_1) {
  Transaction *arg1 = (Transaction *) 0 ;
  char *arg2 = (char *) 0 ;
  ConceptPromise *result = 0 ;
  ConceptPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = (ConceptPromise *)concepts_get_attribute((Transaction const *)arg1,(char const *)arg2);
  *(ConceptPromise **)&_swig_go_result = (ConceptPromise *)result; 
  free(arg2); 
  return _swig_go_result;
}


SchemaException *_wrap_schema_exception_iterator_next_typedb_driver_bb72060ecdcaae0b(SchemaExceptionIterator *_swig_go_0) {
  SchemaExceptionIterator *arg1 = (SchemaExceptionIterator *) 0 ;
  SchemaException *result = 0 ;
  SchemaException *_swig_go_result;
  
  arg1 = *(SchemaExceptionIterator **)&_swig_go_0; 
  
  result = (SchemaException *)schema_exception_iterator_next(arg1);
  *(SchemaException **)&_swig_go_result = (SchemaException *)result; 
  return _swig_go_result;
}


_gostring_ _wrap_schema_exception_code_typedb_driver_bb72060ecdcaae0b(SchemaException *_swig_go_0) {
  SchemaException *arg1 = (SchemaException *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(SchemaException **)&_swig_go_0; 
  
  result = (char *)schema_exception_code((SchemaException const *)arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  string_free(result);
  return _swig_go_result;
}


_gostring_ _wrap_schema_exception_message_typedb_driver_bb72060ecdcaae0b(SchemaException *_swig_go_0) {
  SchemaException *arg1 = (SchemaException *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(SchemaException **)&_swig_go_0; 
  
  result = (char *)schema_exception_message((SchemaException const *)arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  string_free(result);
  return _swig_go_result;
}


SchemaExceptionIterator *_wrap_concepts_get_schema_exceptions_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0) {
  Transaction *arg1 = (Transaction *) 0 ;
  SchemaExceptionIterator *result = 0 ;
  SchemaExceptionIterator *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  
  result = (SchemaExceptionIterator *)concepts_get_schema_exceptions((Transaction const *)arg1);
  *(SchemaExceptionIterator **)&_swig_go_result = (SchemaExceptionIterator *)result; 
  return _swig_go_result;
}


_gostring_ _wrap_thing_get_iid_typedb_driver_bb72060ecdcaae0b(Concept *_swig_go_0) {
  Concept *arg1 = (Concept *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(Concept **)&_swig_go_0; 
  
  result = (char *)thing_get_iid(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  string_free(result);
  return _swig_go_result;
}


bool _wrap_thing_get_is_inferred_typedb_driver_bb72060ecdcaae0b(Concept *_swig_go_0) {
  Concept *arg1 = (Concept *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Concept **)&_swig_go_0; 
  
  result = (bool)thing_get_is_inferred(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


Concept *_wrap_entity_get_type_typedb_driver_bb72060ecdcaae0b(Concept *_swig_go_0) {
  Concept *arg1 = (Concept *) 0 ;
  Concept *result = 0 ;
  Concept *_swig_go_result;
  
  arg1 = *(Concept **)&_swig_go_0; 
  
  result = (Concept *)entity_get_type((Concept const *)arg1);
  *(Concept **)&_swig_go_result = (Concept *)result; 
  return _swig_go_result;
}


Concept *_wrap_relation_get_type_typedb_driver_bb72060ecdcaae0b(Concept *_swig_go_0) {
  Concept *arg1 = (Concept *) 0 ;
  Concept *result = 0 ;
  Concept *_swig_go_result;
  
  arg1 = *(Concept **)&_swig_go_0; 
  
  result = (Concept *)relation_get_type((Concept const *)arg1);
  *(Concept **)&_swig_go_result = (Concept *)result; 
  return _swig_go_result;
}


Concept *_wrap_attribute_get_type_typedb_driver_bb72060ecdcaae0b(Concept *_swig_go_0) {
  Concept *arg1 = (Concept *) 0 ;
  Concept *result = 0 ;
  Concept *_swig_go_result;
  
  arg1 = *(Concept **)&_swig_go_0; 
  
  result = (Concept *)attribute_get_type((Concept const *)arg1);
  *(Concept **)&_swig_go_result = (Concept *)result; 
  return _swig_go_result;
}


Concept *_wrap_attribute_get_value_typedb_driver_bb72060ecdcaae0b(Concept *_swig_go_0) {
  Concept *arg1 = (Concept *) 0 ;
  Concept *result = 0 ;
  Concept *_swig_go_result;
  
  arg1 = *(Concept **)&_swig_go_0; 
  
  result = (Concept *)attribute_get_value((Concept const *)arg1);
  *(Concept **)&_swig_go_result = (Concept *)result; 
  return _swig_go_result;
}


VoidPromise *_wrap_thing_delete_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  VoidPromise *result = 0 ;
  VoidPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  
  result = (VoidPromise *)thing_delete(arg1,arg2);
  *(VoidPromise **)&_swig_go_result = (VoidPromise *)result; 
  return _swig_go_result;
}


BoolPromise *_wrap_thing_is_deleted_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  BoolPromise *result = 0 ;
  BoolPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  
  result = (BoolPromise *)thing_is_deleted(arg1,(Concept const *)arg2);
  *(BoolPromise **)&_swig_go_result = (BoolPromise *)result; 
  return _swig_go_result;
}


ConceptIterator *_wrap_thing_get_has_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1, Concept **_swig_go_2, Annotation **_swig_go_3) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  Concept **arg3 = (Concept **) 0 ;
  Annotation **arg4 = (Annotation **) 0 ;
  ConceptIterator *result = 0 ;
  ConceptIterator *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  arg3 = *(Concept ***)&_swig_go_2; 
  arg4 = *(Annotation ***)&_swig_go_3; 
  
  result = (ConceptIterator *)thing_get_has(arg1,(Concept const *)arg2,(Concept const *const *)arg3,(Annotation const *const *)arg4);
  *(ConceptIterator **)&_swig_go_result = (ConceptIterator *)result; 
  return _swig_go_result;
}


VoidPromise *_wrap_thing_set_has_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1, Concept *_swig_go_2) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  Concept *arg3 = (Concept *) 0 ;
  VoidPromise *result = 0 ;
  VoidPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  arg3 = *(Concept **)&_swig_go_2; 
  
  result = (VoidPromise *)thing_set_has(arg1,arg2,(Concept const *)arg3);
  *(VoidPromise **)&_swig_go_result = (VoidPromise *)result; 
  return _swig_go_result;
}


VoidPromise *_wrap_thing_unset_has_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1, Concept *_swig_go_2) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  Concept *arg3 = (Concept *) 0 ;
  VoidPromise *result = 0 ;
  VoidPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  arg3 = *(Concept **)&_swig_go_2; 
  
  result = (VoidPromise *)thing_unset_has(arg1,arg2,(Concept const *)arg3);
  *(VoidPromise **)&_swig_go_result = (VoidPromise *)result; 
  return _swig_go_result;
}


ConceptIterator *_wrap_thing_get_relations_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1, Concept **_swig_go_2) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  Concept **arg3 = (Concept **) 0 ;
  ConceptIterator *result = 0 ;
  ConceptIterator *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  arg3 = *(Concept ***)&_swig_go_2; 
  
  result = (ConceptIterator *)thing_get_relations(arg1,(Concept const *)arg2,(Concept const *const *)arg3);
  *(ConceptIterator **)&_swig_go_result = (ConceptIterator *)result; 
  return _swig_go_result;
}


ConceptIterator *_wrap_thing_get_playing_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  ConceptIterator *result = 0 ;
  ConceptIterator *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  
  result = (ConceptIterator *)thing_get_playing(arg1,(Concept const *)arg2);
  *(ConceptIterator **)&_swig_go_result = (ConceptIterator *)result; 
  return _swig_go_result;
}


VoidPromise *_wrap_relation_add_role_player_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1, Concept *_swig_go_2, Concept *_swig_go_3) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  Concept *arg3 = (Concept *) 0 ;
  Concept *arg4 = (Concept *) 0 ;
  VoidPromise *result = 0 ;
  VoidPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  arg3 = *(Concept **)&_swig_go_2; 
  arg4 = *(Concept **)&_swig_go_3; 
  
  result = (VoidPromise *)relation_add_role_player(arg1,arg2,(Concept const *)arg3,(Concept const *)arg4);
  *(VoidPromise **)&_swig_go_result = (VoidPromise *)result; 
  return _swig_go_result;
}


VoidPromise *_wrap_relation_remove_role_player_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1, Concept *_swig_go_2, Concept *_swig_go_3) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  Concept *arg3 = (Concept *) 0 ;
  Concept *arg4 = (Concept *) 0 ;
  VoidPromise *result = 0 ;
  VoidPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  arg3 = *(Concept **)&_swig_go_2; 
  arg4 = *(Concept **)&_swig_go_3; 
  
  result = (VoidPromise *)relation_remove_role_player(arg1,arg2,(Concept const *)arg3,(Concept const *)arg4);
  *(VoidPromise **)&_swig_go_result = (VoidPromise *)result; 
  return _swig_go_result;
}


ConceptIterator *_wrap_relation_get_players_by_role_type_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1, Concept **_swig_go_2) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  Concept **arg3 = (Concept **) 0 ;
  ConceptIterator *result = 0 ;
  ConceptIterator *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  arg3 = *(Concept ***)&_swig_go_2; 
  
  result = (ConceptIterator *)relation_get_players_by_role_type(arg1,(Concept const *)arg2,(Concept const *const *)arg3);
  *(ConceptIterator **)&_swig_go_result = (ConceptIterator *)result; 
  return _swig_go_result;
}


RolePlayerIterator *_wrap_relation_get_role_players_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  RolePlayerIterator *result = 0 ;
  RolePlayerIterator *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  
  result = (RolePlayerIterator *)relation_get_role_players(arg1,(Concept const *)arg2);
  *(RolePlayerIterator **)&_swig_go_result = (RolePlayerIterator *)result; 
  return _swig_go_result;
}


ConceptIterator *_wrap_relation_get_relating_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  ConceptIterator *result = 0 ;
  ConceptIterator *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  
  result = (ConceptIterator *)relation_get_relating(arg1,(Concept const *)arg2);
  *(ConceptIterator **)&_swig_go_result = (ConceptIterator *)result; 
  return _swig_go_result;
}


ConceptIterator *_wrap_attribute_get_owners_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1, Concept *_swig_go_2) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  Concept *arg3 = (Concept *) 0 ;
  ConceptIterator *result = 0 ;
  ConceptIterator *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  arg3 = *(Concept **)&_swig_go_2; 
  
  result = (ConceptIterator *)attribute_get_owners(arg1,(Concept const *)arg2,(Concept const *)arg3);
  *(ConceptIterator **)&_swig_go_result = (ConceptIterator *)result; 
  return _swig_go_result;
}


bool _wrap_thing_type_is_root_typedb_driver_bb72060ecdcaae0b(Concept *_swig_go_0) {
  Concept *arg1 = (Concept *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Concept **)&_swig_go_0; 
  
  result = (bool)thing_type_is_root((Concept const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_thing_type_is_abstract_typedb_driver_bb72060ecdcaae0b(Concept *_swig_go_0) {
  Concept *arg1 = (Concept *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Concept **)&_swig_go_0; 
  
  result = (bool)thing_type_is_abstract((Concept const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_thing_type_get_label_typedb_driver_bb72060ecdcaae0b(Concept *_swig_go_0) {
  Concept *arg1 = (Concept *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(Concept **)&_swig_go_0; 
  
  result = (char *)thing_type_get_label((Concept const *)arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  string_free(result);
  return _swig_go_result;
}


BoolPromise *_wrap_thing_type_is_deleted_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  BoolPromise *result = 0 ;
  BoolPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  
  result = (BoolPromise *)thing_type_is_deleted((Transaction const *)arg1,(Concept const *)arg2);
  *(BoolPromise **)&_swig_go_result = (BoolPromise *)result; 
  return _swig_go_result;
}


VoidPromise *_wrap_thing_type_delete_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  VoidPromise *result = 0 ;
  VoidPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  
  result = (VoidPromise *)thing_type_delete((Transaction const *)arg1,arg2);
  *(VoidPromise **)&_swig_go_result = (VoidPromise *)result; 
  return _swig_go_result;
}


VoidPromise *_wrap_thing_type_set_label_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1, _gostring_ _swig_go_2) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  char *arg3 = (char *) 0 ;
  VoidPromise *result = 0 ;
  VoidPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  
  result = (VoidPromise *)thing_type_set_label((Transaction const *)arg1,arg2,(char const *)arg3);
  *(VoidPromise **)&_swig_go_result = (VoidPromise *)result; 
  free(arg3); 
  return _swig_go_result;
}


VoidPromise *_wrap_thing_type_set_abstract_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  VoidPromise *result = 0 ;
  VoidPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  
  result = (VoidPromise *)thing_type_set_abstract((Transaction const *)arg1,arg2);
  *(VoidPromise **)&_swig_go_result = (VoidPromise *)result; 
  return _swig_go_result;
}


VoidPromise *_wrap_thing_type_unset_abstract_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  VoidPromise *result = 0 ;
  VoidPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  
  result = (VoidPromise *)thing_type_unset_abstract((Transaction const *)arg1,arg2);
  *(VoidPromise **)&_swig_go_result = (VoidPromise *)result; 
  return _swig_go_result;
}


ConceptIterator *_wrap_thing_type_get_owns_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1, enum ValueType *_swig_go_2, intgo _swig_go_3, Annotation **_swig_go_4) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  enum ValueType *arg3 = (enum ValueType *) 0 ;
  enum Transitivity arg4 ;
  Annotation **arg5 = (Annotation **) 0 ;
  ConceptIterator *result = 0 ;
  ConceptIterator *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  arg3 = *(enum ValueType **)&_swig_go_2; 
  arg4 = (enum Transitivity)_swig_go_3; 
  arg5 = *(Annotation ***)&_swig_go_4; 
  
  result = (ConceptIterator *)thing_type_get_owns((Transaction const *)arg1,(Concept const *)arg2,(enum ValueType const *)arg3,arg4,(Annotation const *const *)arg5);
  *(ConceptIterator **)&_swig_go_result = (ConceptIterator *)result; 
  return _swig_go_result;
}


ConceptPromise *_wrap_thing_type_get_owns_overridden_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1, Concept *_swig_go_2) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  Concept *arg3 = (Concept *) 0 ;
  ConceptPromise *result = 0 ;
  ConceptPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  arg3 = *(Concept **)&_swig_go_2; 
  
  result = (ConceptPromise *)thing_type_get_owns_overridden((Transaction const *)arg1,(Concept const *)arg2,(Concept const *)arg3);
  *(ConceptPromise **)&_swig_go_result = (ConceptPromise *)result; 
  return _swig_go_result;
}


VoidPromise *_wrap_thing_type_set_owns_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1, Concept *_swig_go_2, Concept *_swig_go_3, Annotation **_swig_go_4) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  Concept *arg3 = (Concept *) 0 ;
  Concept *arg4 = (Concept *) 0 ;
  Annotation **arg5 = (Annotation **) 0 ;
  VoidPromise *result = 0 ;
  VoidPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  arg3 = *(Concept **)&_swig_go_2; 
  arg4 = *(Concept **)&_swig_go_3; 
  arg5 = *(Annotation ***)&_swig_go_4; 
  
  result = (VoidPromise *)thing_type_set_owns((Transaction const *)arg1,arg2,(Concept const *)arg3,(Concept const *)arg4,(Annotation const *const *)arg5);
  *(VoidPromise **)&_swig_go_result = (VoidPromise *)result; 
  return _swig_go_result;
}


VoidPromise *_wrap_thing_type_unset_owns_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1, Concept *_swig_go_2) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  Concept *arg3 = (Concept *) 0 ;
  VoidPromise *result = 0 ;
  VoidPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  arg3 = *(Concept **)&_swig_go_2; 
  
  result = (VoidPromise *)thing_type_unset_owns((Transaction const *)arg1,arg2,(Concept const *)arg3);
  *(VoidPromise **)&_swig_go_result = (VoidPromise *)result; 
  return _swig_go_result;
}


ConceptIterator *_wrap_thing_type_get_plays_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1, intgo _swig_go_2) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  enum Transitivity arg3 ;
  ConceptIterator *result = 0 ;
  ConceptIterator *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  arg3 = (enum Transitivity)_swig_go_2; 
  
  result = (ConceptIterator *)thing_type_get_plays((Transaction const *)arg1,(Concept const *)arg2,arg3);
  *(ConceptIterator **)&_swig_go_result = (ConceptIterator *)result; 
  return _swig_go_result;
}


ConceptPromise *_wrap_thing_type_get_plays_overridden_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1, Concept *_swig_go_2) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  Concept *arg3 = (Concept *) 0 ;
  ConceptPromise *result = 0 ;
  ConceptPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  arg3 = *(Concept **)&_swig_go_2; 
  
  result = (ConceptPromise *)thing_type_get_plays_overridden((Transaction const *)arg1,(Concept const *)arg2,(Concept const *)arg3);
  *(ConceptPromise **)&_swig_go_result = (ConceptPromise *)result; 
  return _swig_go_result;
}


VoidPromise *_wrap_thing_type_set_plays_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1, Concept *_swig_go_2, Concept *_swig_go_3) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  Concept *arg3 = (Concept *) 0 ;
  Concept *arg4 = (Concept *) 0 ;
  VoidPromise *result = 0 ;
  VoidPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  arg3 = *(Concept **)&_swig_go_2; 
  arg4 = *(Concept **)&_swig_go_3; 
  
  result = (VoidPromise *)thing_type_set_plays(arg1,arg2,(Concept const *)arg3,(Concept const *)arg4);
  *(VoidPromise **)&_swig_go_result = (VoidPromise *)result; 
  return _swig_go_result;
}


VoidPromise *_wrap_thing_type_unset_plays_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1, Concept *_swig_go_2) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  Concept *arg3 = (Concept *) 0 ;
  VoidPromise *result = 0 ;
  VoidPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  arg3 = *(Concept **)&_swig_go_2; 
  
  result = (VoidPromise *)thing_type_unset_plays((Transaction const *)arg1,arg2,(Concept const *)arg3);
  *(VoidPromise **)&_swig_go_result = (VoidPromise *)result; 
  return _swig_go_result;
}


StringPromise *_wrap_thing_type_get_syntax_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  StringPromise *result = 0 ;
  StringPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  
  result = (StringPromise *)thing_type_get_syntax((Transaction const *)arg1,(Concept const *)arg2);
  *(StringPromise **)&_swig_go_result = (StringPromise *)result; 
  return _swig_go_result;
}


ConceptPromise *_wrap_entity_type_create_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  ConceptPromise *result = 0 ;
  ConceptPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  
  result = (ConceptPromise *)entity_type_create(arg1,(Concept const *)arg2);
  *(ConceptPromise **)&_swig_go_result = (ConceptPromise *)result; 
  return _swig_go_result;
}


ConceptPromise *_wrap_entity_type_get_supertype_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  ConceptPromise *result = 0 ;
  ConceptPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  
  result = (ConceptPromise *)entity_type_get_supertype(arg1,(Concept const *)arg2);
  *(ConceptPromise **)&_swig_go_result = (ConceptPromise *)result; 
  return _swig_go_result;
}


VoidPromise *_wrap_entity_type_set_supertype_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1, Concept *_swig_go_2) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  Concept *arg3 = (Concept *) 0 ;
  VoidPromise *result = 0 ;
  VoidPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  arg3 = *(Concept **)&_swig_go_2; 
  
  result = (VoidPromise *)entity_type_set_supertype(arg1,arg2,(Concept const *)arg3);
  *(VoidPromise **)&_swig_go_result = (VoidPromise *)result; 
  return _swig_go_result;
}


ConceptIterator *_wrap_entity_type_get_supertypes_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  ConceptIterator *result = 0 ;
  ConceptIterator *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  
  result = (ConceptIterator *)entity_type_get_supertypes(arg1,(Concept const *)arg2);
  *(ConceptIterator **)&_swig_go_result = (ConceptIterator *)result; 
  return _swig_go_result;
}


ConceptIterator *_wrap_entity_type_get_subtypes_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1, intgo _swig_go_2) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  enum Transitivity arg3 ;
  ConceptIterator *result = 0 ;
  ConceptIterator *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  arg3 = (enum Transitivity)_swig_go_2; 
  
  result = (ConceptIterator *)entity_type_get_subtypes(arg1,(Concept const *)arg2,arg3);
  *(ConceptIterator **)&_swig_go_result = (ConceptIterator *)result; 
  return _swig_go_result;
}


ConceptIterator *_wrap_entity_type_get_instances_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1, intgo _swig_go_2) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  enum Transitivity arg3 ;
  ConceptIterator *result = 0 ;
  ConceptIterator *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  arg3 = (enum Transitivity)_swig_go_2; 
  
  result = (ConceptIterator *)entity_type_get_instances(arg1,(Concept const *)arg2,arg3);
  *(ConceptIterator **)&_swig_go_result = (ConceptIterator *)result; 
  return _swig_go_result;
}


ConceptPromise *_wrap_relation_type_create_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  ConceptPromise *result = 0 ;
  ConceptPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  
  result = (ConceptPromise *)relation_type_create(arg1,(Concept const *)arg2);
  *(ConceptPromise **)&_swig_go_result = (ConceptPromise *)result; 
  return _swig_go_result;
}


ConceptPromise *_wrap_relation_type_get_supertype_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  ConceptPromise *result = 0 ;
  ConceptPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  
  result = (ConceptPromise *)relation_type_get_supertype(arg1,(Concept const *)arg2);
  *(ConceptPromise **)&_swig_go_result = (ConceptPromise *)result; 
  return _swig_go_result;
}


VoidPromise *_wrap_relation_type_set_supertype_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1, Concept *_swig_go_2) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  Concept *arg3 = (Concept *) 0 ;
  VoidPromise *result = 0 ;
  VoidPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  arg3 = *(Concept **)&_swig_go_2; 
  
  result = (VoidPromise *)relation_type_set_supertype(arg1,arg2,(Concept const *)arg3);
  *(VoidPromise **)&_swig_go_result = (VoidPromise *)result; 
  return _swig_go_result;
}


ConceptIterator *_wrap_relation_type_get_supertypes_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  ConceptIterator *result = 0 ;
  ConceptIterator *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  
  result = (ConceptIterator *)relation_type_get_supertypes(arg1,(Concept const *)arg2);
  *(ConceptIterator **)&_swig_go_result = (ConceptIterator *)result; 
  return _swig_go_result;
}


ConceptIterator *_wrap_relation_type_get_subtypes_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1, intgo _swig_go_2) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  enum Transitivity arg3 ;
  ConceptIterator *result = 0 ;
  ConceptIterator *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  arg3 = (enum Transitivity)_swig_go_2; 
  
  result = (ConceptIterator *)relation_type_get_subtypes(arg1,(Concept const *)arg2,arg3);
  *(ConceptIterator **)&_swig_go_result = (ConceptIterator *)result; 
  return _swig_go_result;
}


ConceptIterator *_wrap_relation_type_get_instances_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1, intgo _swig_go_2) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  enum Transitivity arg3 ;
  ConceptIterator *result = 0 ;
  ConceptIterator *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  arg3 = (enum Transitivity)_swig_go_2; 
  
  result = (ConceptIterator *)relation_type_get_instances(arg1,(Concept const *)arg2,arg3);
  *(ConceptIterator **)&_swig_go_result = (ConceptIterator *)result; 
  return _swig_go_result;
}


ConceptIterator *_wrap_relation_type_get_relates_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1, intgo _swig_go_2) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  enum Transitivity arg3 ;
  ConceptIterator *result = 0 ;
  ConceptIterator *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  arg3 = (enum Transitivity)_swig_go_2; 
  
  result = (ConceptIterator *)relation_type_get_relates(arg1,(Concept const *)arg2,arg3);
  *(ConceptIterator **)&_swig_go_result = (ConceptIterator *)result; 
  return _swig_go_result;
}


ConceptPromise *_wrap_relation_type_get_relates_for_role_label_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1, _gostring_ _swig_go_2) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  char *arg3 = (char *) 0 ;
  ConceptPromise *result = 0 ;
  ConceptPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  
  result = (ConceptPromise *)relation_type_get_relates_for_role_label(arg1,(Concept const *)arg2,(char const *)arg3);
  *(ConceptPromise **)&_swig_go_result = (ConceptPromise *)result; 
  free(arg3); 
  return _swig_go_result;
}


ConceptPromise *_wrap_relation_type_get_relates_overridden_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1, _gostring_ _swig_go_2) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  char *arg3 = (char *) 0 ;
  ConceptPromise *result = 0 ;
  ConceptPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  
  result = (ConceptPromise *)relation_type_get_relates_overridden(arg1,(Concept const *)arg2,(char const *)arg3);
  *(ConceptPromise **)&_swig_go_result = (ConceptPromise *)result; 
  free(arg3); 
  return _swig_go_result;
}


VoidPromise *_wrap_relation_type_set_relates_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  VoidPromise *result = 0 ;
  VoidPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  
  result = (VoidPromise *)relation_type_set_relates(arg1,arg2,(char const *)arg3,(char const *)arg4);
  *(VoidPromise **)&_swig_go_result = (VoidPromise *)result; 
  free(arg3); 
  free(arg4); 
  return _swig_go_result;
}


VoidPromise *_wrap_relation_type_unset_relates_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1, _gostring_ _swig_go_2) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  char *arg3 = (char *) 0 ;
  VoidPromise *result = 0 ;
  VoidPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  
  result = (VoidPromise *)relation_type_unset_relates(arg1,arg2,(char const *)arg3);
  *(VoidPromise **)&_swig_go_result = (VoidPromise *)result; 
  free(arg3); 
  return _swig_go_result;
}


intgo _wrap_attribute_type_get_value_type_typedb_driver_bb72060ecdcaae0b(Concept *_swig_go_0) {
  Concept *arg1 = (Concept *) 0 ;
  enum ValueType result;
  intgo _swig_go_result;
  
  arg1 = *(Concept **)&_swig_go_0; 
  
  result = (enum ValueType)attribute_type_get_value_type((Concept const *)arg1);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


ConceptPromise *_wrap_attribute_type_put_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1, Concept *_swig_go_2) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  Concept *arg3 = (Concept *) 0 ;
  ConceptPromise *result = 0 ;
  ConceptPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  arg3 = *(Concept **)&_swig_go_2; 
  
  result = (ConceptPromise *)attribute_type_put(arg1,(Concept const *)arg2,(Concept const *)arg3);
  *(ConceptPromise **)&_swig_go_result = (ConceptPromise *)result; 
  return _swig_go_result;
}


ConceptPromise *_wrap_attribute_type_get_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1, Concept *_swig_go_2) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  Concept *arg3 = (Concept *) 0 ;
  ConceptPromise *result = 0 ;
  ConceptPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  arg3 = *(Concept **)&_swig_go_2; 
  
  result = (ConceptPromise *)attribute_type_get(arg1,(Concept const *)arg2,(Concept const *)arg3);
  *(ConceptPromise **)&_swig_go_result = (ConceptPromise *)result; 
  return _swig_go_result;
}


ConceptPromise *_wrap_attribute_type_get_supertype_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  ConceptPromise *result = 0 ;
  ConceptPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  
  result = (ConceptPromise *)attribute_type_get_supertype(arg1,(Concept const *)arg2);
  *(ConceptPromise **)&_swig_go_result = (ConceptPromise *)result; 
  return _swig_go_result;
}


VoidPromise *_wrap_attribute_type_set_supertype_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1, Concept *_swig_go_2) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  Concept *arg3 = (Concept *) 0 ;
  VoidPromise *result = 0 ;
  VoidPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  arg3 = *(Concept **)&_swig_go_2; 
  
  result = (VoidPromise *)attribute_type_set_supertype(arg1,arg2,(Concept const *)arg3);
  *(VoidPromise **)&_swig_go_result = (VoidPromise *)result; 
  return _swig_go_result;
}


ConceptIterator *_wrap_attribute_type_get_supertypes_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  ConceptIterator *result = 0 ;
  ConceptIterator *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  
  result = (ConceptIterator *)attribute_type_get_supertypes(arg1,(Concept const *)arg2);
  *(ConceptIterator **)&_swig_go_result = (ConceptIterator *)result; 
  return _swig_go_result;
}


ConceptIterator *_wrap_attribute_type_get_subtypes_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1, intgo _swig_go_2) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  enum Transitivity arg3 ;
  ConceptIterator *result = 0 ;
  ConceptIterator *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  arg3 = (enum Transitivity)_swig_go_2; 
  
  result = (ConceptIterator *)attribute_type_get_subtypes(arg1,(Concept const *)arg2,arg3);
  *(ConceptIterator **)&_swig_go_result = (ConceptIterator *)result; 
  return _swig_go_result;
}


ConceptIterator *_wrap_attribute_type_get_subtypes_with_value_type_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  enum ValueType arg3 ;
  enum Transitivity arg4 ;
  ConceptIterator *result = 0 ;
  ConceptIterator *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  arg3 = (enum ValueType)_swig_go_2; 
  arg4 = (enum Transitivity)_swig_go_3; 
  
  result = (ConceptIterator *)attribute_type_get_subtypes_with_value_type(arg1,(Concept const *)arg2,arg3,arg4);
  *(ConceptIterator **)&_swig_go_result = (ConceptIterator *)result; 
  return _swig_go_result;
}


ConceptIterator *_wrap_attribute_type_get_instances_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1, intgo _swig_go_2) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  enum Transitivity arg3 ;
  ConceptIterator *result = 0 ;
  ConceptIterator *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  arg3 = (enum Transitivity)_swig_go_2; 
  
  result = (ConceptIterator *)attribute_type_get_instances(arg1,(Concept const *)arg2,arg3);
  *(ConceptIterator **)&_swig_go_result = (ConceptIterator *)result; 
  return _swig_go_result;
}


StringPromise *_wrap_attribute_type_get_regex_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  StringPromise *result = 0 ;
  StringPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  
  result = (StringPromise *)attribute_type_get_regex(arg1,(Concept const *)arg2);
  *(StringPromise **)&_swig_go_result = (StringPromise *)result; 
  return _swig_go_result;
}


VoidPromise *_wrap_attribute_type_set_regex_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1, _gostring_ _swig_go_2) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  char *arg3 = (char *) 0 ;
  VoidPromise *result = 0 ;
  VoidPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  
  result = (VoidPromise *)attribute_type_set_regex(arg1,(Concept const *)arg2,(char const *)arg3);
  *(VoidPromise **)&_swig_go_result = (VoidPromise *)result; 
  free(arg3); 
  return _swig_go_result;
}


VoidPromise *_wrap_attribute_type_unset_regex_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  VoidPromise *result = 0 ;
  VoidPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  
  result = (VoidPromise *)attribute_type_unset_regex(arg1,(Concept const *)arg2);
  *(VoidPromise **)&_swig_go_result = (VoidPromise *)result; 
  return _swig_go_result;
}


ConceptIterator *_wrap_attribute_type_get_owners_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1, intgo _swig_go_2, Annotation **_swig_go_3) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  enum Transitivity arg3 ;
  Annotation **arg4 = (Annotation **) 0 ;
  ConceptIterator *result = 0 ;
  ConceptIterator *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  arg3 = (enum Transitivity)_swig_go_2; 
  arg4 = *(Annotation ***)&_swig_go_3; 
  
  result = (ConceptIterator *)attribute_type_get_owners(arg1,(Concept const *)arg2,arg3,(Annotation const *const *)arg4);
  *(ConceptIterator **)&_swig_go_result = (ConceptIterator *)result; 
  return _swig_go_result;
}


bool _wrap_role_type_is_root_typedb_driver_bb72060ecdcaae0b(Concept *_swig_go_0) {
  Concept *arg1 = (Concept *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Concept **)&_swig_go_0; 
  
  result = (bool)role_type_is_root((Concept const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_role_type_is_abstract_typedb_driver_bb72060ecdcaae0b(Concept *_swig_go_0) {
  Concept *arg1 = (Concept *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Concept **)&_swig_go_0; 
  
  result = (bool)role_type_is_abstract((Concept const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


BoolPromise *_wrap_role_type_is_deleted_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  BoolPromise *result = 0 ;
  BoolPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  
  result = (BoolPromise *)role_type_is_deleted((Transaction const *)arg1,(Concept const *)arg2);
  *(BoolPromise **)&_swig_go_result = (BoolPromise *)result; 
  return _swig_go_result;
}


ConceptPromise *_wrap_role_type_get_relation_type_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  ConceptPromise *result = 0 ;
  ConceptPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  
  result = (ConceptPromise *)role_type_get_relation_type(arg1,(Concept const *)arg2);
  *(ConceptPromise **)&_swig_go_result = (ConceptPromise *)result; 
  return _swig_go_result;
}


VoidPromise *_wrap_role_type_delete_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  VoidPromise *result = 0 ;
  VoidPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  
  result = (VoidPromise *)role_type_delete(arg1,(Concept const *)arg2);
  *(VoidPromise **)&_swig_go_result = (VoidPromise *)result; 
  return _swig_go_result;
}


_gostring_ _wrap_role_type_get_scope_typedb_driver_bb72060ecdcaae0b(Concept *_swig_go_0) {
  Concept *arg1 = (Concept *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(Concept **)&_swig_go_0; 
  
  result = (char *)role_type_get_scope((Concept const *)arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  string_free(result);
  return _swig_go_result;
}


_gostring_ _wrap_role_type_get_name_typedb_driver_bb72060ecdcaae0b(Concept *_swig_go_0) {
  Concept *arg1 = (Concept *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(Concept **)&_swig_go_0; 
  
  result = (char *)role_type_get_name((Concept const *)arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  string_free(result);
  return _swig_go_result;
}


VoidPromise *_wrap_role_type_set_label_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1, _gostring_ _swig_go_2) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  char *arg3 = (char *) 0 ;
  VoidPromise *result = 0 ;
  VoidPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  
  result = (VoidPromise *)role_type_set_label(arg1,(Concept const *)arg2,(char const *)arg3);
  *(VoidPromise **)&_swig_go_result = (VoidPromise *)result; 
  free(arg3); 
  return _swig_go_result;
}


ConceptPromise *_wrap_role_type_get_supertype_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  ConceptPromise *result = 0 ;
  ConceptPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  
  result = (ConceptPromise *)role_type_get_supertype(arg1,(Concept const *)arg2);
  *(ConceptPromise **)&_swig_go_result = (ConceptPromise *)result; 
  return _swig_go_result;
}


ConceptIterator *_wrap_role_type_get_supertypes_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  ConceptIterator *result = 0 ;
  ConceptIterator *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  
  result = (ConceptIterator *)role_type_get_supertypes(arg1,(Concept const *)arg2);
  *(ConceptIterator **)&_swig_go_result = (ConceptIterator *)result; 
  return _swig_go_result;
}


ConceptIterator *_wrap_role_type_get_subtypes_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1, intgo _swig_go_2) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  enum Transitivity arg3 ;
  ConceptIterator *result = 0 ;
  ConceptIterator *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  arg3 = (enum Transitivity)_swig_go_2; 
  
  result = (ConceptIterator *)role_type_get_subtypes(arg1,(Concept const *)arg2,arg3);
  *(ConceptIterator **)&_swig_go_result = (ConceptIterator *)result; 
  return _swig_go_result;
}


ConceptIterator *_wrap_role_type_get_relation_types_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  ConceptIterator *result = 0 ;
  ConceptIterator *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  
  result = (ConceptIterator *)role_type_get_relation_types(arg1,(Concept const *)arg2);
  *(ConceptIterator **)&_swig_go_result = (ConceptIterator *)result; 
  return _swig_go_result;
}


ConceptIterator *_wrap_role_type_get_player_types_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1, intgo _swig_go_2) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  enum Transitivity arg3 ;
  ConceptIterator *result = 0 ;
  ConceptIterator *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  arg3 = (enum Transitivity)_swig_go_2; 
  
  result = (ConceptIterator *)role_type_get_player_types(arg1,(Concept const *)arg2,arg3);
  *(ConceptIterator **)&_swig_go_result = (ConceptIterator *)result; 
  return _swig_go_result;
}


ConceptIterator *_wrap_role_type_get_relation_instances_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1, intgo _swig_go_2) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  enum Transitivity arg3 ;
  ConceptIterator *result = 0 ;
  ConceptIterator *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  arg3 = (enum Transitivity)_swig_go_2; 
  
  result = (ConceptIterator *)role_type_get_relation_instances(arg1,(Concept const *)arg2,arg3);
  *(ConceptIterator **)&_swig_go_result = (ConceptIterator *)result; 
  return _swig_go_result;
}


ConceptIterator *_wrap_role_type_get_player_instances_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Concept *_swig_go_1, intgo _swig_go_2) {
  Transaction *arg1 = (Transaction *) 0 ;
  Concept *arg2 = (Concept *) 0 ;
  enum Transitivity arg3 ;
  ConceptIterator *result = 0 ;
  ConceptIterator *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Concept **)&_swig_go_1; 
  arg3 = (enum Transitivity)_swig_go_2; 
  
  result = (ConceptIterator *)role_type_get_player_instances(arg1,(Concept const *)arg2,arg3);
  *(ConceptIterator **)&_swig_go_result = (ConceptIterator *)result; 
  return _swig_go_result;
}


Connection *_wrap_connection_open_core_typedb_driver_bb72060ecdcaae0b(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  Connection *result = 0 ;
  Connection *_swig_go_result;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  
  result = (Connection *)connection_open_core((char const *)arg1);
  *(Connection **)&_swig_go_result = (Connection *)result; 
  free(arg1); 
  return _swig_go_result;
}


Connection *_wrap_connection_open_cloud_typedb_driver_bb72060ecdcaae0b(_gostring_* _swig_go_0, Credential *_swig_go_1) {
  char **arg1 = (char **) 0 ;
  Credential *arg2 = (Credential *) 0 ;
  Connection *result = 0 ;
  Connection *_swig_go_result;
  
  arg1 = *(char ***)&_swig_go_0; 
  arg2 = *(Credential **)&_swig_go_1; 
  
  result = (Connection *)connection_open_cloud((char const *const *)arg1,(Credential const *)arg2);
  *(Connection **)&_swig_go_result = (Connection *)result; 
  return _swig_go_result;
}


Connection *_wrap_connection_open_cloud_translated_typedb_driver_bb72060ecdcaae0b(_gostring_* _swig_go_0, _gostring_* _swig_go_1, Credential *_swig_go_2) {
  char **arg1 = (char **) 0 ;
  char **arg2 = (char **) 0 ;
  Credential *arg3 = (Credential *) 0 ;
  Connection *result = 0 ;
  Connection *_swig_go_result;
  
  arg1 = *(char ***)&_swig_go_0; 
  arg2 = *(char ***)&_swig_go_1; 
  arg3 = *(Credential **)&_swig_go_2; 
  
  result = (Connection *)connection_open_cloud_translated((char const *const *)arg1,(char const *const *)arg2,(Credential const *)arg3);
  *(Connection **)&_swig_go_result = (Connection *)result; 
  return _swig_go_result;
}


bool _wrap_connection_is_open_typedb_driver_bb72060ecdcaae0b(Connection *_swig_go_0) {
  Connection *arg1 = (Connection *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Connection **)&_swig_go_0; 
  
  result = (bool)connection_is_open((Connection const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_connection_force_close_typedb_driver_bb72060ecdcaae0b(Connection *_swig_go_0) {
  Connection *arg1 = (Connection *) 0 ;
  
  arg1 = *(Connection **)&_swig_go_0; 
  
  connection_force_close(arg1);
  
}


Credential *_wrap_credential_new_typedb_driver_bb72060ecdcaae0b(_gostring_ _swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, bool _swig_go_3) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  Credential *result = 0 ;
  Credential *_swig_go_result;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  arg4 = (bool)_swig_go_3; 
  
  result = (Credential *)credential_new((char const *)arg1,(char const *)arg2,(char const *)arg3,arg4);
  *(Credential **)&_swig_go_result = (Credential *)result; 
  free(arg1); 
  free(arg2); 
  free(arg3); 
  return _swig_go_result;
}


_gostring_ _wrap_database_get_name_typedb_driver_bb72060ecdcaae0b(Database *_swig_go_0) {
  Database *arg1 = (Database *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(Database **)&_swig_go_0; 
  
  result = (char *)database_get_name((Database const *)arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  string_free(result);
  return _swig_go_result;
}


void _wrap_database_delete_typedb_driver_bb72060ecdcaae0b(Database *_swig_go_0) {
  Database *arg1 = (Database *) 0 ;
  
  arg1 = *(Database **)&_swig_go_0; 
  
  database_delete(arg1);
  
}


_gostring_ _wrap_database_schema_typedb_driver_bb72060ecdcaae0b(Database *_swig_go_0) {
  Database *arg1 = (Database *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(Database **)&_swig_go_0; 
  
  result = (char *)database_schema(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  string_free(result);
  return _swig_go_result;
}


_gostring_ _wrap_database_type_schema_typedb_driver_bb72060ecdcaae0b(Database *_swig_go_0) {
  Database *arg1 = (Database *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(Database **)&_swig_go_0; 
  
  result = (char *)database_type_schema(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  string_free(result);
  return _swig_go_result;
}


_gostring_ _wrap_database_rule_schema_typedb_driver_bb72060ecdcaae0b(Database *_swig_go_0) {
  Database *arg1 = (Database *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(Database **)&_swig_go_0; 
  
  result = (char *)database_rule_schema(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  string_free(result);
  return _swig_go_result;
}


ReplicaInfo *_wrap_replica_info_iterator_next_typedb_driver_bb72060ecdcaae0b(ReplicaInfoIterator *_swig_go_0) {
  ReplicaInfoIterator *arg1 = (ReplicaInfoIterator *) 0 ;
  ReplicaInfo *result = 0 ;
  ReplicaInfo *_swig_go_result;
  
  arg1 = *(ReplicaInfoIterator **)&_swig_go_0; 
  
  result = (ReplicaInfo *)replica_info_iterator_next(arg1);
  *(ReplicaInfo **)&_swig_go_result = (ReplicaInfo *)result; 
  return _swig_go_result;
}


ReplicaInfoIterator *_wrap_database_get_replicas_info_typedb_driver_bb72060ecdcaae0b(Database *_swig_go_0) {
  Database *arg1 = (Database *) 0 ;
  ReplicaInfoIterator *result = 0 ;
  ReplicaInfoIterator *_swig_go_result;
  
  arg1 = *(Database **)&_swig_go_0; 
  
  result = (ReplicaInfoIterator *)database_get_replicas_info((Database const *)arg1);
  *(ReplicaInfoIterator **)&_swig_go_result = (ReplicaInfoIterator *)result; 
  return _swig_go_result;
}


ReplicaInfo *_wrap_database_get_primary_replica_info_typedb_driver_bb72060ecdcaae0b(Database *_swig_go_0) {
  Database *arg1 = (Database *) 0 ;
  ReplicaInfo *result = 0 ;
  ReplicaInfo *_swig_go_result;
  
  arg1 = *(Database **)&_swig_go_0; 
  
  result = (ReplicaInfo *)database_get_primary_replica_info((Database const *)arg1);
  *(ReplicaInfo **)&_swig_go_result = (ReplicaInfo *)result; 
  return _swig_go_result;
}


ReplicaInfo *_wrap_database_get_preferred_replica_info_typedb_driver_bb72060ecdcaae0b(Database *_swig_go_0) {
  Database *arg1 = (Database *) 0 ;
  ReplicaInfo *result = 0 ;
  ReplicaInfo *_swig_go_result;
  
  arg1 = *(Database **)&_swig_go_0; 
  
  result = (ReplicaInfo *)database_get_preferred_replica_info((Database const *)arg1);
  *(ReplicaInfo **)&_swig_go_result = (ReplicaInfo *)result; 
  return _swig_go_result;
}


_gostring_ _wrap_replica_info_get_server_typedb_driver_bb72060ecdcaae0b(ReplicaInfo *_swig_go_0) {
  ReplicaInfo *arg1 = (ReplicaInfo *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(ReplicaInfo **)&_swig_go_0; 
  
  result = (char *)replica_info_get_server((ReplicaInfo const *)arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  string_free(result);
  return _swig_go_result;
}


bool _wrap_replica_info_is_primary_typedb_driver_bb72060ecdcaae0b(ReplicaInfo *_swig_go_0) {
  ReplicaInfo *arg1 = (ReplicaInfo *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(ReplicaInfo **)&_swig_go_0; 
  
  result = (bool)replica_info_is_primary((ReplicaInfo const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_replica_info_is_preferred_typedb_driver_bb72060ecdcaae0b(ReplicaInfo *_swig_go_0) {
  ReplicaInfo *arg1 = (ReplicaInfo *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(ReplicaInfo **)&_swig_go_0; 
  
  result = (bool)replica_info_is_preferred((ReplicaInfo const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_replica_info_get_term_typedb_driver_bb72060ecdcaae0b(ReplicaInfo *_swig_go_0) {
  ReplicaInfo *arg1 = (ReplicaInfo *) 0 ;
  int64_t result;
  long long _swig_go_result;
  
  arg1 = *(ReplicaInfo **)&_swig_go_0; 
  
  result = (int64_t)replica_info_get_term((ReplicaInfo const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


DatabaseManager *_wrap_database_manager_new_typedb_driver_bb72060ecdcaae0b(Connection *_swig_go_0) {
  Connection *arg1 = (Connection *) 0 ;
  DatabaseManager *result = 0 ;
  DatabaseManager *_swig_go_result;
  
  arg1 = *(Connection **)&_swig_go_0; 
  
  result = (DatabaseManager *)database_manager_new((Connection const *)arg1);
  *(DatabaseManager **)&_swig_go_result = (DatabaseManager *)result; 
  return _swig_go_result;
}


Database *_wrap_database_iterator_next_typedb_driver_bb72060ecdcaae0b(DatabaseIterator *_swig_go_0) {
  DatabaseIterator *arg1 = (DatabaseIterator *) 0 ;
  Database *result = 0 ;
  Database *_swig_go_result;
  
  arg1 = *(DatabaseIterator **)&_swig_go_0; 
  
  result = (Database *)database_iterator_next(arg1);
  *(Database **)&_swig_go_result = (Database *)result; 
  return _swig_go_result;
}


DatabaseIterator *_wrap_databases_all_typedb_driver_bb72060ecdcaae0b(DatabaseManager *_swig_go_0) {
  DatabaseManager *arg1 = (DatabaseManager *) 0 ;
  DatabaseIterator *result = 0 ;
  DatabaseIterator *_swig_go_result;
  
  arg1 = *(DatabaseManager **)&_swig_go_0; 
  
  result = (DatabaseIterator *)databases_all(arg1);
  *(DatabaseIterator **)&_swig_go_result = (DatabaseIterator *)result; 
  return _swig_go_result;
}


void _wrap_databases_create_typedb_driver_bb72060ecdcaae0b(DatabaseManager *_swig_go_0, _gostring_ _swig_go_1) {
  DatabaseManager *arg1 = (DatabaseManager *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(DatabaseManager **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  databases_create(arg1,(char const *)arg2);
  
  free(arg2); 
}


bool _wrap_databases_contains_typedb_driver_bb72060ecdcaae0b(DatabaseManager *_swig_go_0, _gostring_ _swig_go_1) {
  DatabaseManager *arg1 = (DatabaseManager *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(DatabaseManager **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = (bool)databases_contains(arg1,(char const *)arg2);
  _swig_go_result = result; 
  free(arg2); 
  return _swig_go_result;
}


Database *_wrap_databases_get_typedb_driver_bb72060ecdcaae0b(DatabaseManager *_swig_go_0, _gostring_ _swig_go_1) {
  DatabaseManager *arg1 = (DatabaseManager *) 0 ;
  char *arg2 = (char *) 0 ;
  Database *result = 0 ;
  Database *_swig_go_result;
  
  arg1 = *(DatabaseManager **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = (Database *)databases_get(arg1,(char const *)arg2);
  *(Database **)&_swig_go_result = (Database *)result; 
  free(arg2); 
  return _swig_go_result;
}


void _wrap_init_logging_typedb_driver_bb72060ecdcaae0b() {
  init_logging();
  
}


bool _wrap_check_error_typedb_driver_bb72060ecdcaae0b() {
  bool result;
  bool _swig_go_result;
  
  
  result = (bool)check_error();
  _swig_go_result = result; 
  return _swig_go_result;
}


Error *_wrap_get_last_error_typedb_driver_bb72060ecdcaae0b() {
  Error *result = 0 ;
  Error *_swig_go_result;
  
  
  result = (Error *)get_last_error();
  *(Error **)&_swig_go_result = (Error *)result; 
  return _swig_go_result;
}


_gostring_ _wrap_error_code_typedb_driver_bb72060ecdcaae0b(Error *_swig_go_0) {
  Error *arg1 = (Error *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(Error **)&_swig_go_0; 
  
  result = (char *)error_code((Error const *)arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  string_free(result);
  return _swig_go_result;
}


_gostring_ _wrap_error_message_typedb_driver_bb72060ecdcaae0b(Error *_swig_go_0) {
  Error *arg1 = (Error *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(Error **)&_swig_go_0; 
  
  result = (char *)error_message((Error const *)arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  string_free(result);
  return _swig_go_result;
}


_gostring_ _wrap_rule_to_string_typedb_driver_bb72060ecdcaae0b(Rule *_swig_go_0) {
  Rule *arg1 = (Rule *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(Rule **)&_swig_go_0; 
  
  result = (char *)rule_to_string((Rule const *)arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  string_free(result);
  return _swig_go_result;
}


_gostring_ _wrap_rule_get_label_typedb_driver_bb72060ecdcaae0b(Rule *_swig_go_0) {
  Rule *arg1 = (Rule *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(Rule **)&_swig_go_0; 
  
  result = (char *)rule_get_label((Rule const *)arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  string_free(result);
  return _swig_go_result;
}


_gostring_ _wrap_rule_get_when_typedb_driver_bb72060ecdcaae0b(Rule *_swig_go_0) {
  Rule *arg1 = (Rule *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(Rule **)&_swig_go_0; 
  
  result = (char *)rule_get_when((Rule const *)arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  string_free(result);
  return _swig_go_result;
}


_gostring_ _wrap_rule_get_then_typedb_driver_bb72060ecdcaae0b(Rule *_swig_go_0) {
  Rule *arg1 = (Rule *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(Rule **)&_swig_go_0; 
  
  result = (char *)rule_get_then((Rule const *)arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  string_free(result);
  return _swig_go_result;
}


VoidPromise *_wrap_rule_set_label_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Rule *_swig_go_1, _gostring_ _swig_go_2) {
  Transaction *arg1 = (Transaction *) 0 ;
  Rule *arg2 = (Rule *) 0 ;
  char *arg3 = (char *) 0 ;
  VoidPromise *result = 0 ;
  VoidPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Rule **)&_swig_go_1; 
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  
  result = (VoidPromise *)rule_set_label((Transaction const *)arg1,arg2,(char const *)arg3);
  *(VoidPromise **)&_swig_go_result = (VoidPromise *)result; 
  free(arg3); 
  return _swig_go_result;
}


VoidPromise *_wrap_rule_delete_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Rule *_swig_go_1) {
  Transaction *arg1 = (Transaction *) 0 ;
  Rule *arg2 = (Rule *) 0 ;
  VoidPromise *result = 0 ;
  VoidPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Rule **)&_swig_go_1; 
  
  result = (VoidPromise *)rule_delete((Transaction const *)arg1,arg2);
  *(VoidPromise **)&_swig_go_result = (VoidPromise *)result; 
  return _swig_go_result;
}


BoolPromise *_wrap_rule_is_deleted_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Rule *_swig_go_1) {
  Transaction *arg1 = (Transaction *) 0 ;
  Rule *arg2 = (Rule *) 0 ;
  BoolPromise *result = 0 ;
  BoolPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Rule **)&_swig_go_1; 
  
  result = (BoolPromise *)rule_is_deleted((Transaction const *)arg1,arg2);
  *(BoolPromise **)&_swig_go_result = (BoolPromise *)result; 
  return _swig_go_result;
}


Rule *_wrap_rule_promise_resolve_typedb_driver_bb72060ecdcaae0b(RulePromise *_swig_go_0) {
  RulePromise *arg1 = (RulePromise *) 0 ;
  Rule *result = 0 ;
  Rule *_swig_go_result;
  
  arg1 = *(RulePromise **)&_swig_go_0; 
  
  result = (Rule *)rule_promise_resolve(arg1);
  *(Rule **)&_swig_go_result = (Rule *)result; 
  return _swig_go_result;
}


RulePromise *_wrap_logic_manager_put_rule_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3) {
  Transaction *arg1 = (Transaction *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  RulePromise *result = 0 ;
  RulePromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  
  result = (RulePromise *)logic_manager_put_rule(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  *(RulePromise **)&_swig_go_result = (RulePromise *)result; 
  free(arg2); 
  free(arg3); 
  free(arg4); 
  return _swig_go_result;
}


RulePromise *_wrap_logic_manager_get_rule_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, _gostring_ _swig_go_1) {
  Transaction *arg1 = (Transaction *) 0 ;
  char *arg2 = (char *) 0 ;
  RulePromise *result = 0 ;
  RulePromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = (RulePromise *)logic_manager_get_rule(arg1,(char const *)arg2);
  *(RulePromise **)&_swig_go_result = (RulePromise *)result; 
  free(arg2); 
  return _swig_go_result;
}


Rule *_wrap_rule_iterator_next_typedb_driver_bb72060ecdcaae0b(RuleIterator *_swig_go_0) {
  RuleIterator *arg1 = (RuleIterator *) 0 ;
  Rule *result = 0 ;
  Rule *_swig_go_result;
  
  arg1 = *(RuleIterator **)&_swig_go_0; 
  
  result = (Rule *)rule_iterator_next(arg1);
  *(Rule **)&_swig_go_result = (Rule *)result; 
  return _swig_go_result;
}


RuleIterator *_wrap_logic_manager_get_rules_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0) {
  Transaction *arg1 = (Transaction *) 0 ;
  RuleIterator *result = 0 ;
  RuleIterator *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  
  result = (RuleIterator *)logic_manager_get_rules(arg1);
  *(RuleIterator **)&_swig_go_result = (RuleIterator *)result; 
  return _swig_go_result;
}


Options *_wrap_options_new_typedb_driver_bb72060ecdcaae0b() {
  Options *result = 0 ;
  Options *_swig_go_result;
  
  
  result = (Options *)options_new();
  *(Options **)&_swig_go_result = (Options *)result; 
  return _swig_go_result;
}


void _wrap_options_set_infer_typedb_driver_bb72060ecdcaae0b(Options *_swig_go_0, bool _swig_go_1) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = *(Options **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  options_set_infer(arg1,arg2);
  
}


void _wrap_options_set_trace_inference_typedb_driver_bb72060ecdcaae0b(Options *_swig_go_0, bool _swig_go_1) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = *(Options **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  options_set_trace_inference(arg1,arg2);
  
}


void _wrap_options_set_explain_typedb_driver_bb72060ecdcaae0b(Options *_swig_go_0, bool _swig_go_1) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = *(Options **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  options_set_explain(arg1,arg2);
  
}


void _wrap_options_set_parallel_typedb_driver_bb72060ecdcaae0b(Options *_swig_go_0, bool _swig_go_1) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = *(Options **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  options_set_parallel(arg1,arg2);
  
}


void _wrap_options_set_prefetch_typedb_driver_bb72060ecdcaae0b(Options *_swig_go_0, bool _swig_go_1) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = *(Options **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  options_set_prefetch(arg1,arg2);
  
}


void _wrap_options_set_prefetch_size_typedb_driver_bb72060ecdcaae0b(Options *_swig_go_0, intgo _swig_go_1) {
  Options *arg1 = (Options *) 0 ;
  int32_t arg2 ;
  
  arg1 = *(Options **)&_swig_go_0; 
  arg2 = (int32_t)_swig_go_1; 
  
  options_set_prefetch_size(arg1,arg2);
  
}


void _wrap_options_set_session_idle_timeout_millis_typedb_driver_bb72060ecdcaae0b(Options *_swig_go_0, long long _swig_go_1) {
  Options *arg1 = (Options *) 0 ;
  int64_t arg2 ;
  
  arg1 = *(Options **)&_swig_go_0; 
  arg2 = (int64_t)_swig_go_1; 
  
  options_set_session_idle_timeout_millis(arg1,arg2);
  
}


void _wrap_options_set_transaction_timeout_millis_typedb_driver_bb72060ecdcaae0b(Options *_swig_go_0, long long _swig_go_1) {
  Options *arg1 = (Options *) 0 ;
  int64_t arg2 ;
  
  arg1 = *(Options **)&_swig_go_0; 
  arg2 = (int64_t)_swig_go_1; 
  
  options_set_transaction_timeout_millis(arg1,arg2);
  
}


void _wrap_options_set_schema_lock_acquire_timeout_millis_typedb_driver_bb72060ecdcaae0b(Options *_swig_go_0, long long _swig_go_1) {
  Options *arg1 = (Options *) 0 ;
  int64_t arg2 ;
  
  arg1 = *(Options **)&_swig_go_0; 
  arg2 = (int64_t)_swig_go_1; 
  
  options_set_schema_lock_acquire_timeout_millis(arg1,arg2);
  
}


void _wrap_options_set_read_any_replica_typedb_driver_bb72060ecdcaae0b(Options *_swig_go_0, bool _swig_go_1) {
  Options *arg1 = (Options *) 0 ;
  bool arg2 ;
  
  arg1 = *(Options **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  options_set_read_any_replica(arg1,arg2);
  
}


bool _wrap_options_get_infer_typedb_driver_bb72060ecdcaae0b(Options *_swig_go_0) {
  Options *arg1 = (Options *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Options **)&_swig_go_0; 
  
  result = (bool)options_get_infer((Options const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_options_get_trace_inference_typedb_driver_bb72060ecdcaae0b(Options *_swig_go_0) {
  Options *arg1 = (Options *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Options **)&_swig_go_0; 
  
  result = (bool)options_get_trace_inference((Options const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_options_get_explain_typedb_driver_bb72060ecdcaae0b(Options *_swig_go_0) {
  Options *arg1 = (Options *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Options **)&_swig_go_0; 
  
  result = (bool)options_get_explain((Options const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_options_get_parallel_typedb_driver_bb72060ecdcaae0b(Options *_swig_go_0) {
  Options *arg1 = (Options *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Options **)&_swig_go_0; 
  
  result = (bool)options_get_parallel((Options const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_options_get_prefetch_typedb_driver_bb72060ecdcaae0b(Options *_swig_go_0) {
  Options *arg1 = (Options *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Options **)&_swig_go_0; 
  
  result = (bool)options_get_prefetch((Options const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_options_get_prefetch_size_typedb_driver_bb72060ecdcaae0b(Options *_swig_go_0) {
  Options *arg1 = (Options *) 0 ;
  int32_t result;
  intgo _swig_go_result;
  
  arg1 = *(Options **)&_swig_go_0; 
  
  result = (int32_t)options_get_prefetch_size((Options const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_options_get_session_idle_timeout_millis_typedb_driver_bb72060ecdcaae0b(Options *_swig_go_0) {
  Options *arg1 = (Options *) 0 ;
  int64_t result;
  long long _swig_go_result;
  
  arg1 = *(Options **)&_swig_go_0; 
  
  result = (int64_t)options_get_session_idle_timeout_millis((Options const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_options_get_transaction_timeout_millis_typedb_driver_bb72060ecdcaae0b(Options *_swig_go_0) {
  Options *arg1 = (Options *) 0 ;
  int64_t result;
  long long _swig_go_result;
  
  arg1 = *(Options **)&_swig_go_0; 
  
  result = (int64_t)options_get_transaction_timeout_millis((Options const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_options_get_schema_lock_acquire_timeout_millis_typedb_driver_bb72060ecdcaae0b(Options *_swig_go_0) {
  Options *arg1 = (Options *) 0 ;
  int64_t result;
  long long _swig_go_result;
  
  arg1 = *(Options **)&_swig_go_0; 
  
  result = (int64_t)options_get_schema_lock_acquire_timeout_millis((Options const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_options_get_read_any_replica_typedb_driver_bb72060ecdcaae0b(Options *_swig_go_0) {
  Options *arg1 = (Options *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Options **)&_swig_go_0; 
  
  result = (bool)options_get_read_any_replica((Options const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_options_has_infer_typedb_driver_bb72060ecdcaae0b(Options *_swig_go_0) {
  Options *arg1 = (Options *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Options **)&_swig_go_0; 
  
  result = (bool)options_has_infer((Options const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_options_has_trace_inference_typedb_driver_bb72060ecdcaae0b(Options *_swig_go_0) {
  Options *arg1 = (Options *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Options **)&_swig_go_0; 
  
  result = (bool)options_has_trace_inference((Options const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_options_has_explain_typedb_driver_bb72060ecdcaae0b(Options *_swig_go_0) {
  Options *arg1 = (Options *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Options **)&_swig_go_0; 
  
  result = (bool)options_has_explain((Options const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_options_has_parallel_typedb_driver_bb72060ecdcaae0b(Options *_swig_go_0) {
  Options *arg1 = (Options *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Options **)&_swig_go_0; 
  
  result = (bool)options_has_parallel((Options const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_options_has_prefetch_typedb_driver_bb72060ecdcaae0b(Options *_swig_go_0) {
  Options *arg1 = (Options *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Options **)&_swig_go_0; 
  
  result = (bool)options_has_prefetch((Options const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_options_has_prefetch_size_typedb_driver_bb72060ecdcaae0b(Options *_swig_go_0) {
  Options *arg1 = (Options *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Options **)&_swig_go_0; 
  
  result = (bool)options_has_prefetch_size((Options const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_options_has_session_idle_timeout_millis_typedb_driver_bb72060ecdcaae0b(Options *_swig_go_0) {
  Options *arg1 = (Options *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Options **)&_swig_go_0; 
  
  result = (bool)options_has_session_idle_timeout_millis((Options const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_options_has_transaction_timeout_millis_typedb_driver_bb72060ecdcaae0b(Options *_swig_go_0) {
  Options *arg1 = (Options *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Options **)&_swig_go_0; 
  
  result = (bool)options_has_transaction_timeout_millis((Options const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_options_has_schema_lock_acquire_timeout_millis_typedb_driver_bb72060ecdcaae0b(Options *_swig_go_0) {
  Options *arg1 = (Options *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Options **)&_swig_go_0; 
  
  result = (bool)options_has_schema_lock_acquire_timeout_millis((Options const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_options_has_read_any_replica_typedb_driver_bb72060ecdcaae0b(Options *_swig_go_0) {
  Options *arg1 = (Options *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Options **)&_swig_go_0; 
  
  result = (bool)options_has_read_any_replica((Options const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_void_promise_resolve_typedb_driver_bb72060ecdcaae0b(VoidPromise *_swig_go_0) {
  VoidPromise *arg1 = (VoidPromise *) 0 ;
  
  arg1 = *(VoidPromise **)&_swig_go_0; 
  
  void_promise_resolve(arg1);
  
}


bool _wrap_bool_promise_resolve_typedb_driver_bb72060ecdcaae0b(BoolPromise *_swig_go_0) {
  BoolPromise *arg1 = (BoolPromise *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(BoolPromise **)&_swig_go_0; 
  
  result = (bool)bool_promise_resolve(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_string_promise_resolve_typedb_driver_bb72060ecdcaae0b(StringPromise *_swig_go_0) {
  StringPromise *arg1 = (StringPromise *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(StringPromise **)&_swig_go_0; 
  
  result = (char *)string_promise_resolve(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  string_free(result);
  return _swig_go_result;
}


VoidPromise *_wrap_query_define_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, _gostring_ _swig_go_1, Options *_swig_go_2) {
  Transaction *arg1 = (Transaction *) 0 ;
  char *arg2 = (char *) 0 ;
  Options *arg3 = (Options *) 0 ;
  VoidPromise *result = 0 ;
  VoidPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = *(Options **)&_swig_go_2; 
  
  result = (VoidPromise *)query_define(arg1,(char const *)arg2,(Options const *)arg3);
  *(VoidPromise **)&_swig_go_result = (VoidPromise *)result; 
  free(arg2); 
  return _swig_go_result;
}


VoidPromise *_wrap_query_undefine_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, _gostring_ _swig_go_1, Options *_swig_go_2) {
  Transaction *arg1 = (Transaction *) 0 ;
  char *arg2 = (char *) 0 ;
  Options *arg3 = (Options *) 0 ;
  VoidPromise *result = 0 ;
  VoidPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = *(Options **)&_swig_go_2; 
  
  result = (VoidPromise *)query_undefine(arg1,(char const *)arg2,(Options const *)arg3);
  *(VoidPromise **)&_swig_go_result = (VoidPromise *)result; 
  free(arg2); 
  return _swig_go_result;
}


VoidPromise *_wrap_query_delete_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, _gostring_ _swig_go_1, Options *_swig_go_2) {
  Transaction *arg1 = (Transaction *) 0 ;
  char *arg2 = (char *) 0 ;
  Options *arg3 = (Options *) 0 ;
  VoidPromise *result = 0 ;
  VoidPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = *(Options **)&_swig_go_2; 
  
  result = (VoidPromise *)query_delete(arg1,(char const *)arg2,(Options const *)arg3);
  *(VoidPromise **)&_swig_go_result = (VoidPromise *)result; 
  free(arg2); 
  return _swig_go_result;
}


ConceptMap *_wrap_concept_map_iterator_next_typedb_driver_bb72060ecdcaae0b(ConceptMapIterator *_swig_go_0) {
  ConceptMapIterator *arg1 = (ConceptMapIterator *) 0 ;
  ConceptMap *result = 0 ;
  ConceptMap *_swig_go_result;
  
  arg1 = *(ConceptMapIterator **)&_swig_go_0; 
  
  result = (ConceptMap *)concept_map_iterator_next(arg1);
  *(ConceptMap **)&_swig_go_result = (ConceptMap *)result; 
  return _swig_go_result;
}


ConceptMapIterator *_wrap_query_get_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, _gostring_ _swig_go_1, Options *_swig_go_2) {
  Transaction *arg1 = (Transaction *) 0 ;
  char *arg2 = (char *) 0 ;
  Options *arg3 = (Options *) 0 ;
  ConceptMapIterator *result = 0 ;
  ConceptMapIterator *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = *(Options **)&_swig_go_2; 
  
  result = (ConceptMapIterator *)query_get(arg1,(char const *)arg2,(Options const *)arg3);
  *(ConceptMapIterator **)&_swig_go_result = (ConceptMapIterator *)result; 
  free(arg2); 
  return _swig_go_result;
}


StringIterator *_wrap_query_fetch_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, _gostring_ _swig_go_1, Options *_swig_go_2) {
  Transaction *arg1 = (Transaction *) 0 ;
  char *arg2 = (char *) 0 ;
  Options *arg3 = (Options *) 0 ;
  StringIterator *result = 0 ;
  StringIterator *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = *(Options **)&_swig_go_2; 
  
  result = (StringIterator *)query_fetch(arg1,(char const *)arg2,(Options const *)arg3);
  *(StringIterator **)&_swig_go_result = (StringIterator *)result; 
  free(arg2); 
  return _swig_go_result;
}


ConceptMapIterator *_wrap_query_insert_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, _gostring_ _swig_go_1, Options *_swig_go_2) {
  Transaction *arg1 = (Transaction *) 0 ;
  char *arg2 = (char *) 0 ;
  Options *arg3 = (Options *) 0 ;
  ConceptMapIterator *result = 0 ;
  ConceptMapIterator *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = *(Options **)&_swig_go_2; 
  
  result = (ConceptMapIterator *)query_insert(arg1,(char const *)arg2,(Options const *)arg3);
  *(ConceptMapIterator **)&_swig_go_result = (ConceptMapIterator *)result; 
  free(arg2); 
  return _swig_go_result;
}


ConceptMapIterator *_wrap_query_update_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, _gostring_ _swig_go_1, Options *_swig_go_2) {
  Transaction *arg1 = (Transaction *) 0 ;
  char *arg2 = (char *) 0 ;
  Options *arg3 = (Options *) 0 ;
  ConceptMapIterator *result = 0 ;
  ConceptMapIterator *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = *(Options **)&_swig_go_2; 
  
  result = (ConceptMapIterator *)query_update(arg1,(char const *)arg2,(Options const *)arg3);
  *(ConceptMapIterator **)&_swig_go_result = (ConceptMapIterator *)result; 
  free(arg2); 
  return _swig_go_result;
}


ConceptPromise *_wrap_query_get_aggregate_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, _gostring_ _swig_go_1, Options *_swig_go_2) {
  Transaction *arg1 = (Transaction *) 0 ;
  char *arg2 = (char *) 0 ;
  Options *arg3 = (Options *) 0 ;
  ConceptPromise *result = 0 ;
  ConceptPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = *(Options **)&_swig_go_2; 
  
  result = (ConceptPromise *)query_get_aggregate(arg1,(char const *)arg2,(Options const *)arg3);
  *(ConceptPromise **)&_swig_go_result = (ConceptPromise *)result; 
  free(arg2); 
  return _swig_go_result;
}


ConceptMapGroup *_wrap_concept_map_group_iterator_next_typedb_driver_bb72060ecdcaae0b(ConceptMapGroupIterator *_swig_go_0) {
  ConceptMapGroupIterator *arg1 = (ConceptMapGroupIterator *) 0 ;
  ConceptMapGroup *result = 0 ;
  ConceptMapGroup *_swig_go_result;
  
  arg1 = *(ConceptMapGroupIterator **)&_swig_go_0; 
  
  result = (ConceptMapGroup *)concept_map_group_iterator_next(arg1);
  *(ConceptMapGroup **)&_swig_go_result = (ConceptMapGroup *)result; 
  return _swig_go_result;
}


ConceptMapGroupIterator *_wrap_query_get_group_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, _gostring_ _swig_go_1, Options *_swig_go_2) {
  Transaction *arg1 = (Transaction *) 0 ;
  char *arg2 = (char *) 0 ;
  Options *arg3 = (Options *) 0 ;
  ConceptMapGroupIterator *result = 0 ;
  ConceptMapGroupIterator *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = *(Options **)&_swig_go_2; 
  
  result = (ConceptMapGroupIterator *)query_get_group(arg1,(char const *)arg2,(Options const *)arg3);
  *(ConceptMapGroupIterator **)&_swig_go_result = (ConceptMapGroupIterator *)result; 
  free(arg2); 
  return _swig_go_result;
}


ValueGroup *_wrap_value_group_iterator_next_typedb_driver_bb72060ecdcaae0b(ValueGroupIterator *_swig_go_0) {
  ValueGroupIterator *arg1 = (ValueGroupIterator *) 0 ;
  ValueGroup *result = 0 ;
  ValueGroup *_swig_go_result;
  
  arg1 = *(ValueGroupIterator **)&_swig_go_0; 
  
  result = (ValueGroup *)value_group_iterator_next(arg1);
  *(ValueGroup **)&_swig_go_result = (ValueGroup *)result; 
  return _swig_go_result;
}


ValueGroupIterator *_wrap_query_get_group_aggregate_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, _gostring_ _swig_go_1, Options *_swig_go_2) {
  Transaction *arg1 = (Transaction *) 0 ;
  char *arg2 = (char *) 0 ;
  Options *arg3 = (Options *) 0 ;
  ValueGroupIterator *result = 0 ;
  ValueGroupIterator *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = *(Options **)&_swig_go_2; 
  
  result = (ValueGroupIterator *)query_get_group_aggregate(arg1,(char const *)arg2,(Options const *)arg3);
  *(ValueGroupIterator **)&_swig_go_result = (ValueGroupIterator *)result; 
  free(arg2); 
  return _swig_go_result;
}


Explanation *_wrap_explanation_iterator_next_typedb_driver_bb72060ecdcaae0b(ExplanationIterator *_swig_go_0) {
  ExplanationIterator *arg1 = (ExplanationIterator *) 0 ;
  Explanation *result = 0 ;
  Explanation *_swig_go_result;
  
  arg1 = *(ExplanationIterator **)&_swig_go_0; 
  
  result = (Explanation *)explanation_iterator_next(arg1);
  *(Explanation **)&_swig_go_result = (Explanation *)result; 
  return _swig_go_result;
}


ExplanationIterator *_wrap_query_explain_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0, Explainable *_swig_go_1, Options *_swig_go_2) {
  Transaction *arg1 = (Transaction *) 0 ;
  Explainable *arg2 = (Explainable *) 0 ;
  Options *arg3 = (Options *) 0 ;
  ExplanationIterator *result = 0 ;
  ExplanationIterator *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  arg2 = *(Explainable **)&_swig_go_1; 
  arg3 = *(Options **)&_swig_go_2; 
  
  result = (ExplanationIterator *)query_explain(arg1,(Explainable const *)arg2,(Options const *)arg3);
  *(ExplanationIterator **)&_swig_go_result = (ExplanationIterator *)result; 
  return _swig_go_result;
}


Session *_wrap_session_new_typedb_driver_bb72060ecdcaae0b(DatabaseManager *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, Options *_swig_go_3) {
  DatabaseManager *arg1 = (DatabaseManager *) 0 ;
  char *arg2 = (char *) 0 ;
  enum SessionType arg3 ;
  Options *arg4 = (Options *) 0 ;
  Session *result = 0 ;
  Session *_swig_go_result;
  
  arg1 = *(DatabaseManager **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (enum SessionType)_swig_go_2; 
  arg4 = *(Options **)&_swig_go_3; 
  
  result = (Session *)session_new(arg1,(char const *)arg2,arg3,(Options const *)arg4);
  *(Session **)&_swig_go_result = (Session *)result; 
  free(arg2); 
  return _swig_go_result;
}


_gostring_ _wrap_session_get_database_name_typedb_driver_bb72060ecdcaae0b(Session *_swig_go_0) {
  Session *arg1 = (Session *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(Session **)&_swig_go_0; 
  
  result = (char *)session_get_database_name((Session const *)arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  string_free(result);
  return _swig_go_result;
}


bool _wrap_session_is_open_typedb_driver_bb72060ecdcaae0b(Session *_swig_go_0) {
  Session *arg1 = (Session *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Session **)&_swig_go_0; 
  
  result = (bool)session_is_open((Session const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_session_force_close_typedb_driver_bb72060ecdcaae0b(Session *_swig_go_0) {
  Session *arg1 = (Session *) 0 ;
  
  arg1 = *(Session **)&_swig_go_0; 
  
  session_force_close(arg1);
  
}


Transaction *_wrap_transaction_new_typedb_driver_bb72060ecdcaae0b(Session *_swig_go_0, intgo _swig_go_1, Options *_swig_go_2) {
  Session *arg1 = (Session *) 0 ;
  enum TransactionType arg2 ;
  Options *arg3 = (Options *) 0 ;
  Transaction *result = 0 ;
  Transaction *_swig_go_result;
  
  arg1 = *(Session **)&_swig_go_0; 
  arg2 = (enum TransactionType)_swig_go_1; 
  arg3 = *(Options **)&_swig_go_2; 
  
  result = (Transaction *)transaction_new((Session const *)arg1,arg2,(Options const *)arg3);
  *(Transaction **)&_swig_go_result = (Transaction *)result; 
  return _swig_go_result;
}


void _wrap_transaction_force_close_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0) {
  Transaction *arg1 = (Transaction *) 0 ;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  
  transaction_force_close(arg1);
  
}


VoidPromise *_wrap_transaction_commit_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0) {
  Transaction *arg1 = (Transaction *) 0 ;
  VoidPromise *result = 0 ;
  VoidPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  
  result = (VoidPromise *)transaction_commit(arg1);
  *(VoidPromise **)&_swig_go_result = (VoidPromise *)result; 
  return _swig_go_result;
}


VoidPromise *_wrap_transaction_rollback_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0) {
  Transaction *arg1 = (Transaction *) 0 ;
  VoidPromise *result = 0 ;
  VoidPromise *_swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  
  result = (VoidPromise *)transaction_rollback((Transaction const *)arg1);
  *(VoidPromise **)&_swig_go_result = (VoidPromise *)result; 
  return _swig_go_result;
}


bool _wrap_transaction_is_open_typedb_driver_bb72060ecdcaae0b(Transaction *_swig_go_0) {
  Transaction *arg1 = (Transaction *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Transaction **)&_swig_go_0; 
  
  result = (bool)transaction_is_open((Transaction const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_user_get_username_typedb_driver_bb72060ecdcaae0b(User *_swig_go_0) {
  User *arg1 = (User *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(User **)&_swig_go_0; 
  
  result = (char *)user_get_username(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  string_free(result);
  return _swig_go_result;
}


long long _wrap_user_get_password_expiry_seconds_typedb_driver_bb72060ecdcaae0b(User *_swig_go_0) {
  User *arg1 = (User *) 0 ;
  int64_t result;
  long long _swig_go_result;
  
  arg1 = *(User **)&_swig_go_0; 
  
  result = (int64_t)user_get_password_expiry_seconds(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_user_password_update_typedb_driver_bb72060ecdcaae0b(User *_swig_go_0, UserManager *_swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3) {
  User *arg1 = (User *) 0 ;
  UserManager *arg2 = (UserManager *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = *(User **)&_swig_go_0; 
  arg2 = *(UserManager **)&_swig_go_1; 
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  
  user_password_update(arg1,(UserManager const *)arg2,(char const *)arg3,(char const *)arg4);
  
  free(arg3); 
  free(arg4); 
}


UserManager *_wrap_user_manager_new_typedb_driver_bb72060ecdcaae0b(Connection *_swig_go_0) {
  Connection *arg1 = (Connection *) 0 ;
  UserManager *result = 0 ;
  UserManager *_swig_go_result;
  
  arg1 = *(Connection **)&_swig_go_0; 
  
  result = (UserManager *)user_manager_new((Connection const *)arg1);
  *(UserManager **)&_swig_go_result = (UserManager *)result; 
  return _swig_go_result;
}


User *_wrap_users_current_user_typedb_driver_bb72060ecdcaae0b(UserManager *_swig_go_0) {
  UserManager *arg1 = (UserManager *) 0 ;
  User *result = 0 ;
  User *_swig_go_result;
  
  arg1 = *(UserManager **)&_swig_go_0; 
  
  result = (User *)users_current_user((UserManager const *)arg1);
  *(User **)&_swig_go_result = (User *)result; 
  return _swig_go_result;
}


User *_wrap_user_iterator_next_typedb_driver_bb72060ecdcaae0b(UserIterator *_swig_go_0) {
  UserIterator *arg1 = (UserIterator *) 0 ;
  User *result = 0 ;
  User *_swig_go_result;
  
  arg1 = *(UserIterator **)&_swig_go_0; 
  
  result = (User *)user_iterator_next(arg1);
  *(User **)&_swig_go_result = (User *)result; 
  return _swig_go_result;
}


UserIterator *_wrap_users_all_typedb_driver_bb72060ecdcaae0b(UserManager *_swig_go_0) {
  UserManager *arg1 = (UserManager *) 0 ;
  UserIterator *result = 0 ;
  UserIterator *_swig_go_result;
  
  arg1 = *(UserManager **)&_swig_go_0; 
  
  result = (UserIterator *)users_all((UserManager const *)arg1);
  *(UserIterator **)&_swig_go_result = (UserIterator *)result; 
  return _swig_go_result;
}


bool _wrap_users_contains_typedb_driver_bb72060ecdcaae0b(UserManager *_swig_go_0, _gostring_ _swig_go_1) {
  UserManager *arg1 = (UserManager *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(UserManager **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = (bool)users_contains((UserManager const *)arg1,(char const *)arg2);
  _swig_go_result = result; 
  free(arg2); 
  return _swig_go_result;
}


void _wrap_users_create_typedb_driver_bb72060ecdcaae0b(UserManager *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  UserManager *arg1 = (UserManager *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = *(UserManager **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  
  users_create((UserManager const *)arg1,(char const *)arg2,(char const *)arg3);
  
  free(arg2); 
  free(arg3); 
}


void _wrap_users_delete_typedb_driver_bb72060ecdcaae0b(UserManager *_swig_go_0, _gostring_ _swig_go_1) {
  UserManager *arg1 = (UserManager *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(UserManager **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  users_delete((UserManager const *)arg1,(char const *)arg2);
  
  free(arg2); 
}


User *_wrap_users_get_typedb_driver_bb72060ecdcaae0b(UserManager *_swig_go_0, _gostring_ _swig_go_1) {
  UserManager *arg1 = (UserManager *) 0 ;
  char *arg2 = (char *) 0 ;
  User *result = 0 ;
  User *_swig_go_result;
  
  arg1 = *(UserManager **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = (User *)users_get((UserManager const *)arg1,(char const *)arg2);
  *(User **)&_swig_go_result = (User *)result; 
  free(arg2); 
  return _swig_go_result;
}


void _wrap_users_set_password_typedb_driver_bb72060ecdcaae0b(UserManager *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  UserManager *arg1 = (UserManager *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = *(UserManager **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  
  users_set_password((UserManager const *)arg1,(char const *)arg2,(char const *)arg3);
  
  free(arg2); 
  free(arg3); 
}


#ifdef __cplusplus
}
#endif

